[{"path":"https://nils-s.github.io/cas-asds-practical/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/about.html","id":"reproducible-research","dir":"Articles","previous_headings":"","what":"Reproducible Research","title":"About","text":"Using R packages order bundle necessary resources make data analysis project reproducible suggested multiple sources (e.g. (Wickham Bryan 2023; Flight 2014; Marwick, Boettiger, Mullen 2018b, 2018a)), sources (e.g. (Flight 2021)) suggesting lighter-weight approaches like (Landau 2024, 2021). Since one goals learn R R ecosystem, complex setup using R package chosen, mostly learning experience. CRAN task view reproducible research (Blischak et al. 2024) contains many possibilities future exploration. want cite package reason, can use e.g.","code":"citation(\"asds2024.nils.practical\") #> To cite asds2024.nils.practical use: #>  #>   S. N (2024). _CAS ASDS Practical Project: Exploratory Analysis of #>   Road Bike Trip Data_. R package version 0.2.0.9000, #>   <https://github.com/nils-s/cas-asds-practical>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {CAS ASDS Practical Project: Exploratory Analysis of Road Bike Trip Data}, #>     author = {Nils S.}, #>     year = {2024}, #>     note = {R package version 0.2.0.9000}, #>     url = {https://github.com/nils-s/cas-asds-practical}, #>   }"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Analyses","text":"final module Certificate Advanced Studies Advanced Statistical Data Science (CAS ASDS) practical project. topic project can freely chosen students, e.g. using data work environment elsewhere. data chose final project data collected road bike trips years 2018 2023. Data collected using GPS-enabled bike computer, complementary sensors heart rate, cadence, speed data. total, preprocessed data comprises approximately 160000 data points, collected 157 trips. actual number trips seasons higher, however, due data corruption bike computer’s memory, unknown number trip recordings lost. following diagram shows number tracks year data set, suggesting data block (data blocks) containing records 2022 2023 lost. Available trip data year following image shows geographic component available data map, tracks red. Routes driven frequently appear saturated, rarely-driven routes appear lighter (e.g. route lake Thun appears data set). Geographic track data (red) map cantons Berne Fribourg Since data collected purpose project, .e. data controlled experiment, well-formed desirable ideal analysis. Instead, project exploratory analysis available data.","code":"tracks |>   group_by(year = year(date)) |>   ggplot(aes(x = year)) +   geom_bar() +   labs(x = \"Year\", y = \"Number of Tracks\") be_fr <- swiss_cantons |>   filter(KTNR %in% c(2,10)) # 2 = BE, 10 = FR be_fr_lakes <- swiss_lakes |>   filter(grepl(\"Biel|Brienz|Gruyère|Murten|Neuchâtel|Thun\", GMDNAME)) # only show lakes named after these towns  track_linestrings <- track_details |>   filter(!is.na(latitude) & !is.na(longitude)) |>   st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = \"WGS84\") |> # EPSG 4326 = WGS-84   st_transform(crs = 2056) |> # EPSG 2056 = CH-1903+/LV95   to_linestrings()  track_linestrings |>   ggplot() +   geom_sf(data = be_fr, fill = \"#f0f0f0\", alpha = 0.5) +   geom_sf(data = be_fr_lakes, fill = \"#0080ff\", alpha = 0.25) +   geom_sf(color = \"red\", linewidth = 0.25, alpha = 0.2) +   annotation_scale(     location = \"br\",     height = unit(0.1, \"cm\"),     width_hint = 0.2) +   annotation_north_arrow(     location = \"tr\",     width = unit(1, \"cm\"),     height = unit(1, \"cm\"),     pad_x = unit(0.5, \"cm\"),     pad_y = unit(0.5, \"cm\"),     style = north_arrow_fancy_orienteering,     which_north = \"true\")"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"analyses","dir":"Articles","previous_headings":"","what":"Analyses","title":"Data Analyses","text":"initial raw data pre-processed inclusion package (see vignette(\"data\")), however, first cursory analyses interactive session still showed unexpected results. cleaning therefore done first.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"data-cleaning","dir":"Articles","previous_headings":"Analyses","what":"Data Cleaning","title":"Data Analyses","text":"Despite initial data cleanup, still invalid data track 157, seems caused sort GPS hiccup:  seems easy enough fix, though, since appears distance_absolute_m values track seem sudden jump. Knowing total length track (slightly 40 km), seeing seems one corrupted data point (subsequent points seem continue normally), fix simply subtract jump points distance > 90 km. Assuming points jump occurs p1p_1 p2p_2, height jump assumed jump height=d(p2)−d(p1)−δ(p2) \\text{jump height} = d(p_2) - d(p_1) - \\delta(p_2)  (, given point, d(⋅)d(\\cdot) means distance_absolute_m, δ(⋅)\\delta(\\cdot) means distance_m). words, true difference distance_absolute_m p1p_1 p2p_2 assumed distance_m value p2p_2 (.e. distance travelled segment). excess difference assumed erroneous, subtracted p2p_2 subsequent points. resulting distance plot appears correct:  corrected data used analyses.","code":"track_details |>   filter(date == tracks[157,]$date) |>   ggplot(aes(x = training_time_absolute_s / 100, y = distance_absolute_m / 1000)) +   geom_line() +   labs(x = \"Training Time (s)\", y = \"Distance (km)\") +   ggtitle(\"Track 157: Distance Over Time\") corrected_track_details <- track_details |>   mutate(     correction = distance_absolute_m - lag(distance_absolute_m, default = 0) - distance_m,     needs_correction = (distance_absolute_m > 90000) & (date == tracks[157,]$date),     corrected_distance_absolute_m = ifelse(needs_correction, distance_absolute_m - max(correction), distance_absolute_m))  corrected_tracks <- corrected_track_details |>   mutate(     distance_absolute_m = ifelse(needs_correction, corrected_distance_absolute_m, distance_absolute_m)   ) |>   summarize_tracks() corrected_track_details |>   filter(date == tracks[157,]$date) |>   ggplot(aes(x = training_time_absolute_s / 100, y = corrected_distance_absolute_m / 1000)) +   geom_line() +   labs(x = \"Training Time (s)\", y = \"Distance (km)\") +   ggtitle(\"Track 157: Corrected Distance Over Time\")"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"linear-models","dir":"Articles","previous_headings":"Analyses","what":"Linear Models","title":"Data Analyses","text":"First, let’s try fit linear models using different predictors, get idea predictors might influence average track speed.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"temperature-effects","dir":"Articles","previous_headings":"Analyses > Linear Models","what":"Temperature Effects","title":"Data Analyses","text":"first idea look temperature effect, .e. temperature influence average speed? Intuitively, optimum temperature, lower higher temperatures result lower performance. can seen model, temperature statistically significant influence (p-Value 0.8, .e. nowhere near 0.05 suggest significance). However, estimated effect small, might small effect need much data reliably detect. Another factor might straight line well suited describe effect, since assumed optimum temperature mean e.g. quadratic function better fit data.  B-spline (blue) seems fit slightly better, natural cubic spline (green) fit well lower temperatures. However, neither spline models significant parameter besides intercept, viable either. Thus, temperature seems either effect, effect small lot data required reliably detect .","code":"fit_temperature <- lm(speed_km_h ~ temperature_c, data = corrected_tracks) summary(fit_temperature) #>  #> Call: #> lm(formula = speed_km_h ~ temperature_c, data = corrected_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.1644 -0.8346  0.0939  0.8662  2.8922  #>  #> Coefficients: #>                Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   28.013494   0.573848  48.817   <2e-16 *** #> temperature_c -0.006994   0.027551  -0.254      0.8     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.296 on 155 degrees of freedom #> Multiple R-squared:  0.0004156,  Adjusted R-squared:  -0.006033  #> F-statistic: 0.06444 on 1 and 155 DF,  p-value: 0.7999 fit_temp_ns <- lm(speed_km_h ~ ns(temperature_c, df = 3), data = corrected_tracks) fit_temp_bs <- lm(speed_km_h ~ bs(temperature_c, df = 3), data = corrected_tracks)  temp_pred_grid <- seq(from = 10.0, to = 32.5, by = 0.01) temp_pred_data <- data.frame(temperature_c = temp_pred_grid) fit_temp_pred <- data.frame(speed_km_h = predict(fit_temperature, temp_pred_data), temperature_c = temp_pred_grid) fit_temp_ns_pred <- data.frame(speed_km_h = predict(fit_temp_ns, temp_pred_data), temperature_c = temp_pred_grid) fit_temp_bs_pred <- data.frame(speed_km_h = predict(fit_temp_bs, temp_pred_data), temperature_c = temp_pred_grid) corrected_tracks |>   ggplot(aes(x = temperature_c, y = speed_km_h)) +   geom_point() +   geom_line(data = fit_temp_pred, color = \"red\") +   geom_line(data = fit_temp_ns_pred, color = \"green\") +   geom_line(data = fit_temp_bs_pred, color = \"blue\") +   labs(x = \"Temperature (°C)\", y = \"Speed (km/h)\")"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"effects-of-track-length-inclination-and-heart-rate","dir":"Articles","previous_headings":"Analyses > Linear Models","what":"Effects of Track Length, Inclination, and Heart Rate","title":"Data Analyses","text":"Another model seems rather intuitive use track’s distance, average inclination, average heart rate model average speed: model shows inclination heart rate highly significant, whereas distance . estimated coefficients indicate expected relationships: steeper tracks (.e. higher average inclination) lower average speed higher effort (.e. higher average heart rate) leads higher average speed longer distances lead lower speed (however, relationship statistically significant) Furthermore, model based three predictors can account almost 60% observed variance data. Evaluating model:  model obvious weaknesses (residuals lower higher ends observed speed spectrum close zero , one track (number 2) relatively large residual error leverage), overall seems bad.","code":"fit_dihr <- lm(speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm, data = corrected_tracks) summary(fit_dihr) #>  #> Call: #> lm(formula = speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm,  #>     data = corrected_tracks) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -3.04856 -0.47765  0.08545  0.51618  2.38627  #>  #> Coefficients: #>                   Estimate Std. Error t value Pr(>|t|)     #> (Intercept)      2.193e+01  1.272e+00  17.243  < 2e-16 *** #> distance_km     -7.525e-03  3.852e-03  -1.954   0.0526 .   #> avg_inclination -4.206e+02  3.931e+01 -10.701  < 2e-16 *** #> avg_hr_bpm       7.484e-02  8.444e-03   8.863 1.87e-15 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.8418 on 153 degrees of freedom #> Multiple R-squared:  0.5839, Adjusted R-squared:  0.5757  #> F-statistic: 71.55 on 3 and 153 DF,  p-value: < 2.2e-16 plot(fit_dihr)"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"effect-of-previous-training-session","dir":"Articles","previous_headings":"Analyses > Linear Models","what":"Effect of Previous Training Session","title":"Data Analyses","text":"Another potential factor influence average speed previous training: one reasonably expect training session shortly another one negatively affect speed second training. hand, long break trainings probably also negatively affect average speed (assuming positive effect training slowly lost time). validate hypothesis, previous model using distance, inclination, heart rate can extended number days since last training, previous training’s distance, inclination average heart rate: model, days since previous training, previous training’s distance significant factors, previous training’s inclination average heart rate . seems counterintuitive, considering previous, simpler model (one without considering previous training), distance significant factor, inclination heart rate highly significant. extended model, inclination heart rate still significant current training, significant previous training. Furthermore, current previous training’s distance now significant predictor. additional predictors significant, extended model explains additional three percentage points variance data. Additionally, diagnostic plots look much worse simpler model:  now data points higher leverage also larger residuals, QQ-plot shows larger deviation diagonal low end, residuals plot looks worse well. Overall, taking previous training account seems worthwile: model explains slightly variance, cost significantly worse diagnostics.","code":"corrected_tracks <- corrected_tracks |>   mutate(     previous_training_date = lag(date),     days_since_previous_training = as.numeric(difftime(date, previous_training_date, units = \"days\"))   ) augmented_tracks <- corrected_tracks |>   inner_join(corrected_tracks, join_by(previous_training_date == date), suffix = c(\"\", \"_previous_training\")) fit_pt <- lm(speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm + days_since_previous_training + distance_km_previous_training + avg_inclination_previous_training + avg_hr_bpm_previous_training, data = augmented_tracks) summary(fit_pt) #>  #> Call: #> lm(formula = speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm +  #>     days_since_previous_training + distance_km_previous_training +  #>     avg_inclination_previous_training + avg_hr_bpm_previous_training,  #>     data = augmented_tracks) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.80543 -0.51481  0.06608  0.49832  2.35074  #>  #> Coefficients: #>                                     Estimate Std. Error t value Pr(>|t|)     #> (Intercept)                        2.182e+01  1.367e+00  15.967  < 2e-16 *** #> distance_km                       -1.127e-02  4.125e-03  -2.732  0.00707 **  #> avg_inclination                   -4.224e+02  3.935e+01 -10.735  < 2e-16 *** #> avg_hr_bpm                         7.834e-02  1.219e-02   6.427 1.68e-09 *** #> days_since_previous_training      -3.606e-03  1.626e-03  -2.218  0.02811 *   #> distance_km_previous_training      9.850e-03  4.184e-03   2.354  0.01989 *   #> avg_inclination_previous_training -5.667e+01  3.871e+01  -1.464  0.14534     #> avg_hr_bpm_previous_training       4.168e-04  1.207e-02   0.035  0.97250     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.8206 on 148 degrees of freedom #> Multiple R-squared:  0.6152, Adjusted R-squared:  0.597  #> F-statistic:  33.8 on 7 and 148 DF,  p-value: < 2.2e-16 plot(fit_pt)"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"effects-of-training-season","dir":"Articles","previous_headings":"Analyses > Linear Models","what":"Effects of Training Season","title":"Data Analyses","text":"Since data actually time series, seems likely time-based aspect potential training effect. order take consideration linear model, month calendar week tried predictors. Apparently, later months significantly different average speed first month data (.e. March). Using Helmert contrasts instead (default) treatment contrasts compare later months preceding months (instead comparing March baseline), significant results: Maybe, however, training effect lies fact later season average track longer/steeper/exhausting general?  Overall, exception March (one data point), least median length tracks seems follow pattern longer tracks summer, shorter tracks beginning end season. might related fitness level, /weather (temperature, precipitation) available daylight (longer days summer months, shorter days spring fall). Thus, let’s try model taking account month, well distance, inclination, heart rate, interaction month: Due dummy-coded month variable interactions, now lot parameters, significant. Furthermore, interactions October-level month variable produce NAs, suggesting multicollinearity problem. model now explains 71% variance data, however, due model complexity, large number non-significant parameters, appears dubious whether model appropriate. diagnostic plots, hand, don’t look bad (though worse simpler model using just distance, inclination, heart rate):  Trying thing higher temporal resolution (using calendar week instead month) pointless, though:  now lot factor levels, correspondingly fewer data points per level, fitting model way month just results model lots non-significant parameters: R-squared improved (now explaining 86% variance), diagnostics plots look terrible (see QQ-plot, residuals vs. leverage plot), suggesting thing mentioned : realistically, model useless.","code":"tracks_speed_month <- corrected_tracks |>   mutate(month = as.factor(month(date))) |>   select(speed_km_h, month)    fit_month <- lm(speed_km_h ~ month, data = tracks_speed_month) summary(fit_month) #>  #> Call: #> lm(formula = speed_km_h ~ month, data = tracks_speed_month) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.9110 -0.8636  0.1374  0.7991  3.0588  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  26.9297     1.2843  20.969   <2e-16 *** #> month4        1.2657     1.3293   0.952    0.343     #> month5        1.5226     1.3160   1.157    0.249     #> month6        0.7667     1.3042   0.588    0.558     #> month7        0.6297     1.3087   0.481    0.631     #> month8        0.8073     1.3048   0.619    0.537     #> month9        1.1544     1.3119   0.880    0.380     #> month10       0.7003     1.3470   0.520    0.604     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.284 on 149 degrees of freedom #> Multiple R-squared:  0.0568, Adjusted R-squared:  0.01249  #> F-statistic: 1.282 on 7 and 149 DF,  p-value: 0.263 contrasts(tracks_speed_month$month) <- \"contr.helmert\" summary(lm(speed_km_h ~ month, data = tracks_speed_month)) #>  #> Call: #> lm(formula = speed_km_h ~ month, data = tracks_speed_month) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.9110 -0.8636  0.1374  0.7991  3.0588  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 27.78555    0.18769 148.043   <2e-16 *** #> month1       0.63286    0.66467   0.952    0.343     #> month2       0.29659    0.24135   1.229    0.221     #> month3      -0.04069    0.12675  -0.321    0.749     #> month4      -0.05181    0.08538  -0.607    0.545     #> month5      -0.00494    0.06051  -0.082    0.935     #> month6       0.04605    0.05106   0.902    0.369     #> month7      -0.02222    0.05695  -0.390    0.697     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.284 on 149 degrees of freedom #> Multiple R-squared:  0.0568, Adjusted R-squared:  0.01249  #> F-statistic: 1.282 on 7 and 149 DF,  p-value: 0.263 corrected_tracks |>   ggplot(aes(x = as.factor(month(date)), y = distance_km)) +   geom_boxplot() +   geom_jitter(width = 0.25, color = \"#0000f0\", alpha = 0.5) +   labs(x = \"Month\", y = \"Distance (km)\") +   ggtitle(\"Track Length by Month\") fit_month_and_more <- lm(speed_km_h ~ as.factor(month(date)) * (distance_km + avg_hr_bpm + avg_inclination), data = corrected_tracks) summary(fit_month_and_more) #>  #> Call: #> lm(formula = speed_km_h ~ as.factor(month(date)) * (distance_km +  #>     avg_hr_bpm + avg_inclination), data = corrected_tracks) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.18792 -0.40704  0.06077  0.41516  1.79607  #>  #> Coefficients: (3 not defined because of singularities) #>                                            Estimate Std. Error t value Pr(>|t|) #> (Intercept)                               2.422e+01  4.299e+00   5.634 1.07e-07 #> as.factor(month(date))4                   1.401e+01  7.179e+00   1.951  0.05321 #> as.factor(month(date))5                   5.452e+00  6.390e+00   0.853  0.39518 #> as.factor(month(date))6                  -8.583e+00  4.885e+00  -1.757  0.08127 #> as.factor(month(date))7                  -8.261e+00  5.284e+00  -1.564  0.12040 #> as.factor(month(date))8                  -3.090e+00  5.144e+00  -0.601  0.54910 #> as.factor(month(date))9                  -3.777e+00  5.314e+00  -0.711  0.47846 #> as.factor(month(date))10                  9.444e-01  1.118e+00   0.845  0.39987 #> distance_km                               9.491e-03  3.007e-02   0.316  0.75282 #> avg_hr_bpm                                3.443e-02  3.118e-02   1.104  0.27154 #> avg_inclination                          -2.591e+02  1.093e+02  -2.371  0.01921 #> as.factor(month(date))4:distance_km      -5.165e-02  3.450e-02  -1.497  0.13681 #> as.factor(month(date))5:distance_km      -2.113e-02  3.532e-02  -0.598  0.55074 #> as.factor(month(date))6:distance_km      -4.167e-03  3.127e-02  -0.133  0.89417 #> as.factor(month(date))7:distance_km      -2.269e-02  3.081e-02  -0.737  0.46274 #> as.factor(month(date))8:distance_km      -1.204e-02  3.098e-02  -0.389  0.69826 #> as.factor(month(date))9:distance_km      -3.563e-02  3.284e-02  -1.085  0.27999 #> as.factor(month(date))10:distance_km             NA         NA      NA       NA #> as.factor(month(date))4:avg_hr_bpm       -6.154e-02  5.019e-02  -1.226  0.22238 #> as.factor(month(date))5:avg_hr_bpm       -7.934e-03  4.438e-02  -0.179  0.85839 #> as.factor(month(date))6:avg_hr_bpm        1.045e-01  3.699e-02   2.824  0.00550 #> as.factor(month(date))7:avg_hr_bpm        7.897e-02  3.694e-02   2.138  0.03443 #> as.factor(month(date))8:avg_hr_bpm        5.322e-02  3.585e-02   1.484  0.14020 #> as.factor(month(date))9:avg_hr_bpm        3.792e-02  3.807e-02   0.996  0.32108 #> as.factor(month(date))10:avg_hr_bpm              NA         NA      NA       NA #> as.factor(month(date))4:avg_inclination  -1.792e+02  1.718e+02  -1.043  0.29875 #> as.factor(month(date))5:avg_inclination  -2.062e+02  1.590e+02  -1.297  0.19707 #> as.factor(month(date))6:avg_inclination  -4.468e+02  1.669e+02  -2.677  0.00841 #> as.factor(month(date))7:avg_inclination  -1.110e+02  1.336e+02  -0.831  0.40770 #> as.factor(month(date))8:avg_inclination  -2.608e+02  1.321e+02  -1.974  0.05057 #> as.factor(month(date))9:avg_inclination   9.679e+01  1.685e+02   0.575  0.56663 #> as.factor(month(date))10:avg_inclination         NA         NA      NA       NA #>                                              #> (Intercept)                              *** #> as.factor(month(date))4                  .   #> as.factor(month(date))5                      #> as.factor(month(date))6                  .   #> as.factor(month(date))7                      #> as.factor(month(date))8                      #> as.factor(month(date))9                      #> as.factor(month(date))10                     #> distance_km                                  #> avg_hr_bpm                                   #> avg_inclination                          *   #> as.factor(month(date))4:distance_km          #> as.factor(month(date))5:distance_km          #> as.factor(month(date))6:distance_km          #> as.factor(month(date))7:distance_km          #> as.factor(month(date))8:distance_km          #> as.factor(month(date))9:distance_km          #> as.factor(month(date))10:distance_km         #> as.factor(month(date))4:avg_hr_bpm           #> as.factor(month(date))5:avg_hr_bpm           #> as.factor(month(date))6:avg_hr_bpm       **  #> as.factor(month(date))7:avg_hr_bpm       *   #> as.factor(month(date))8:avg_hr_bpm           #> as.factor(month(date))9:avg_hr_bpm           #> as.factor(month(date))10:avg_hr_bpm          #> as.factor(month(date))4:avg_inclination      #> as.factor(month(date))5:avg_inclination      #> as.factor(month(date))6:avg_inclination  **  #> as.factor(month(date))7:avg_inclination      #> as.factor(month(date))8:avg_inclination  .   #> as.factor(month(date))9:avg_inclination      #> as.factor(month(date))10:avg_inclination     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.7615 on 128 degrees of freedom #> Multiple R-squared:  0.7151, Adjusted R-squared:  0.6528  #> F-statistic: 11.48 on 28 and 128 DF,  p-value: < 2.2e-16 plot(fit_month_and_more) corrected_tracks |>   ggplot(aes(x = as.factor(isoweek(date)), y = distance_km)) +   geom_boxplot() +   geom_jitter(width = 0.25, color = \"#0000f0\", alpha = 0.5) +   labs(x = \"Calendar Week\", y = \"Distance (km)\") +   ggtitle(\"Track Length by Calendar Week\") #>  #> Call: #> lm(formula = speed_km_h ~ as.factor(isoweek(date)) * (distance_km +  #>     avg_hr_bpm + avg_inclination), data = corrected_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -1.9400 -0.2377  0.0000  0.1475  2.1459  #>  #> Coefficients: (15 not defined because of singularities) #>                                              Estimate Std. Error t value #> (Intercept)                                 1.783e+01  9.223e+00   1.933 #> as.factor(isoweek(date))14                  5.127e-01  5.991e+00   0.086 #> as.factor(isoweek(date))15                  4.730e+01  2.201e+02   0.215 #> as.factor(isoweek(date))16                  6.872e+01  2.573e+01   2.671 #> as.factor(isoweek(date))17                  8.307e+00  3.011e+01   0.276 #> as.factor(isoweek(date))18                 -1.559e+02  2.703e+02  -0.577 #> as.factor(isoweek(date))19                  3.307e+01  5.343e+01   0.619 #> as.factor(isoweek(date))21                  8.707e+00  1.115e+01   0.781 #> as.factor(isoweek(date))22                  1.745e+00  1.091e+01   0.160 #> as.factor(isoweek(date))23                 -8.769e-01  1.183e+01  -0.074 #> as.factor(isoweek(date))24                  9.441e-01  1.003e+01   0.094 #> as.factor(isoweek(date))25                 -2.428e+00  1.210e+01  -0.201 #> as.factor(isoweek(date))26                 -1.566e+01  1.218e+01  -1.286 #> as.factor(isoweek(date))27                  3.127e+01  1.841e+02   0.170 #> as.factor(isoweek(date))28                 -4.288e+00  1.119e+01  -0.383 #> as.factor(isoweek(date))29                 -8.458e+00  1.112e+01  -0.760 #> as.factor(isoweek(date))30                 -1.976e+00  1.248e+01  -0.158 #> as.factor(isoweek(date))31                  8.720e+00  1.027e+01   0.849 #> as.factor(isoweek(date))32                  3.753e+00  1.064e+01   0.353 #> as.factor(isoweek(date))33                 -4.268e+00  1.301e+01  -0.328 #> as.factor(isoweek(date))34                  9.199e-01  1.048e+01   0.088 #> as.factor(isoweek(date))35                  3.831e+00  4.188e+01   0.091 #> as.factor(isoweek(date))36                  4.993e+00  2.165e+01   0.231 #> as.factor(isoweek(date))37                  1.808e+01  2.441e+01   0.741 #> as.factor(isoweek(date))38                 -6.360e+00  6.210e+01  -0.102 #> as.factor(isoweek(date))39                 -1.552e+01  1.619e+01  -0.959 #> as.factor(isoweek(date))40                  1.379e+01  1.898e+01   0.727 #> as.factor(isoweek(date))41                 -1.676e+00  1.078e+01  -0.155 #> as.factor(isoweek(date))43                  7.124e-01  1.497e+00   0.476 #> distance_km                                 1.894e-03  1.898e-01   0.010 #> avg_hr_bpm                                  8.325e-02  5.184e-02   1.606 #> avg_inclination                            -3.201e+02  1.609e+02  -1.990 #> as.factor(isoweek(date))14:distance_km             NA         NA      NA #> as.factor(isoweek(date))15:distance_km     -1.519e-01  1.404e+00  -0.108 #> as.factor(isoweek(date))16:distance_km      7.010e-01  4.406e-01   1.591 #> as.factor(isoweek(date))17:distance_km     -2.736e-02  1.931e-01  -0.142 #> as.factor(isoweek(date))18:distance_km      6.243e+00  1.063e+01   0.587 #> as.factor(isoweek(date))19:distance_km      6.980e-01  7.662e-01   0.911 #> as.factor(isoweek(date))21:distance_km     -5.726e-03  1.916e-01  -0.030 #> as.factor(isoweek(date))22:distance_km     -2.839e-03  1.907e-01  -0.015 #> as.factor(isoweek(date))23:distance_km      2.902e-03  1.909e-01   0.015 #> as.factor(isoweek(date))24:distance_km     -7.468e-03  1.918e-01  -0.039 #> as.factor(isoweek(date))25:distance_km     -2.234e-02  1.949e-01  -0.115 #> as.factor(isoweek(date))26:distance_km     -8.857e-04  1.912e-01  -0.005 #> as.factor(isoweek(date))27:distance_km      4.921e-01  2.727e+00   0.180 #> as.factor(isoweek(date))28:distance_km     -1.889e-03  1.915e-01  -0.010 #> as.factor(isoweek(date))29:distance_km     -2.818e-02  1.902e-01  -0.148 #> as.factor(isoweek(date))30:distance_km     -2.480e-02  1.905e-01  -0.130 #> as.factor(isoweek(date))31:distance_km     -3.739e-03  1.900e-01  -0.020 #> as.factor(isoweek(date))32:distance_km     -8.034e-03  1.904e-01  -0.042 #> as.factor(isoweek(date))33:distance_km     -1.355e-02  1.906e-01  -0.071 #> as.factor(isoweek(date))34:distance_km      1.575e-02  1.901e-01   0.083 #> as.factor(isoweek(date))35:distance_km      3.925e-02  4.197e-01   0.094 #> as.factor(isoweek(date))36:distance_km     -1.310e-02  1.916e-01  -0.068 #> as.factor(isoweek(date))37:distance_km      1.773e-01  3.463e-01   0.512 #> as.factor(isoweek(date))38:distance_km     -1.810e-01  6.844e-01  -0.264 #> as.factor(isoweek(date))39:distance_km     -1.334e-02  1.978e-01  -0.067 #> as.factor(isoweek(date))40:distance_km      5.990e-03  1.919e-01   0.031 #> as.factor(isoweek(date))41:distance_km      7.456e-02  2.017e-01   0.370 #> as.factor(isoweek(date))43:distance_km             NA         NA      NA #> as.factor(isoweek(date))14:avg_hr_bpm              NA         NA      NA #> as.factor(isoweek(date))15:avg_hr_bpm      -2.782e-01  1.389e+00  -0.200 #> as.factor(isoweek(date))16:avg_hr_bpm      -4.800e-02  1.188e-01  -0.404 #> as.factor(isoweek(date))17:avg_hr_bpm      -4.019e-02  2.009e-01  -0.200 #> as.factor(isoweek(date))18:avg_hr_bpm              NA         NA      NA #> as.factor(isoweek(date))19:avg_hr_bpm      -3.379e-02  1.875e-01  -0.180 #> as.factor(isoweek(date))21:avg_hr_bpm      -2.646e-02  7.117e-02  -0.372 #> as.factor(isoweek(date))22:avg_hr_bpm       7.164e-03  6.783e-02   0.106 #> as.factor(isoweek(date))23:avg_hr_bpm       4.386e-02  8.661e-02   0.506 #> as.factor(isoweek(date))24:avg_hr_bpm       3.671e-02  7.105e-02   0.517 #> as.factor(isoweek(date))25:avg_hr_bpm       1.050e-01  9.454e-02   1.110 #> as.factor(isoweek(date))26:avg_hr_bpm       1.392e-01  7.541e-02   1.847 #> as.factor(isoweek(date))27:avg_hr_bpm       4.189e-02  1.972e-01   0.212 #> as.factor(isoweek(date))28:avg_hr_bpm       3.029e-02  7.143e-02   0.424 #> as.factor(isoweek(date))29:avg_hr_bpm       7.027e-02  6.379e-02   1.101 #> as.factor(isoweek(date))30:avg_hr_bpm       4.646e-02  7.709e-02   0.603 #> as.factor(isoweek(date))31:avg_hr_bpm      -4.919e-02  5.967e-02  -0.824 #> as.factor(isoweek(date))32:avg_hr_bpm       1.709e-02  6.734e-02   0.254 #> as.factor(isoweek(date))33:avg_hr_bpm       4.439e-02  7.239e-02   0.613 #> as.factor(isoweek(date))34:avg_hr_bpm              NA         NA      NA #> as.factor(isoweek(date))35:avg_hr_bpm       2.786e-02  9.976e-02   0.279 #> as.factor(isoweek(date))36:avg_hr_bpm      -1.468e-02  1.264e-01  -0.116 #> as.factor(isoweek(date))37:avg_hr_bpm      -3.462e-02  7.016e-02  -0.493 #> as.factor(isoweek(date))38:avg_hr_bpm      -4.966e-02  7.755e-02  -0.640 #> as.factor(isoweek(date))39:avg_hr_bpm       1.084e-01  9.900e-02   1.095 #> as.factor(isoweek(date))40:avg_hr_bpm      -1.295e-01  1.858e-01  -0.697 #> as.factor(isoweek(date))41:avg_hr_bpm              NA         NA      NA #> as.factor(isoweek(date))43:avg_hr_bpm              NA         NA      NA #> as.factor(isoweek(date))14:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))15:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))16:avg_inclination -8.300e+03  4.507e+03  -1.841 #> as.factor(isoweek(date))17:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))18:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))19:avg_inclination -4.700e+03  5.102e+03  -0.921 #> as.factor(isoweek(date))21:avg_inclination -3.398e+02  3.040e+02  -1.118 #> as.factor(isoweek(date))22:avg_inclination -1.167e+02  2.458e+02  -0.475 #> as.factor(isoweek(date))23:avg_inclination -3.543e+02  4.112e+02  -0.862 #> as.factor(isoweek(date))24:avg_inclination -3.861e+02  5.216e+02  -0.740 #> as.factor(isoweek(date))25:avg_inclination -8.385e+02  7.079e+02  -1.184 #> as.factor(isoweek(date))26:avg_inclination -2.399e+02  2.880e+02  -0.833 #> as.factor(isoweek(date))27:avg_inclination -5.289e+03  3.030e+04  -0.175 #> as.factor(isoweek(date))28:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))29:avg_inclination  8.114e+01  2.879e+02   0.282 #> as.factor(isoweek(date))30:avg_inclination -1.315e+02  3.317e+02  -0.397 #> as.factor(isoweek(date))31:avg_inclination -2.751e+01  1.835e+02  -0.150 #> as.factor(isoweek(date))32:avg_inclination -3.697e+02  2.639e+02  -1.401 #> as.factor(isoweek(date))33:avg_inclination  1.019e+01  2.583e+02   0.039 #> as.factor(isoweek(date))34:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))35:avg_inclination -7.534e+02  4.309e+03  -0.175 #> as.factor(isoweek(date))36:avg_inclination -7.249e+01  3.743e+02  -0.194 #> as.factor(isoweek(date))37:avg_inclination -1.766e+03  3.178e+03  -0.556 #> as.factor(isoweek(date))38:avg_inclination  2.181e+03  7.739e+03   0.282 #> as.factor(isoweek(date))39:avg_inclination  1.863e+02  2.521e+02   0.739 #> as.factor(isoweek(date))40:avg_inclination  5.615e+02  9.226e+02   0.609 #> as.factor(isoweek(date))41:avg_inclination         NA         NA      NA #> as.factor(isoweek(date))43:avg_inclination         NA         NA      NA #>                                            Pr(>|t|)    #> (Intercept)                                 0.05831 .  #> as.factor(isoweek(date))14                  0.93210    #> as.factor(isoweek(date))15                  0.83061    #> as.factor(isoweek(date))16                  0.00989 ** #> as.factor(isoweek(date))17                  0.78365    #> as.factor(isoweek(date))18                  0.56627    #> as.factor(isoweek(date))19                  0.53855    #> as.factor(isoweek(date))21                  0.43819    #> as.factor(isoweek(date))22                  0.87352    #> as.factor(isoweek(date))23                  0.94118    #> as.factor(isoweek(date))24                  0.92535    #> as.factor(isoweek(date))25                  0.84163    #> as.factor(isoweek(date))26                  0.20374    #> as.factor(isoweek(date))27                  0.86573    #> as.factor(isoweek(date))28                  0.70295    #> as.factor(isoweek(date))29                  0.45025    #> as.factor(isoweek(date))30                  0.87473    #> as.factor(isoweek(date))31                  0.39935    #> as.factor(isoweek(date))32                  0.72566    #> as.factor(isoweek(date))33                  0.74411    #> as.factor(isoweek(date))34                  0.93039    #> as.factor(isoweek(date))35                  0.92744    #> as.factor(isoweek(date))36                  0.81840    #> as.factor(isoweek(date))37                  0.46202    #> as.factor(isoweek(date))38                  0.91878    #> as.factor(isoweek(date))39                  0.34181    #> as.factor(isoweek(date))40                  0.47051    #> as.factor(isoweek(date))41                  0.87701    #> as.factor(isoweek(date))43                  0.63598    #> distance_km                                 0.99207    #> avg_hr_bpm                                  0.11391    #> avg_inclination                             0.05153 .  #> as.factor(isoweek(date))14:distance_km           NA    #> as.factor(isoweek(date))15:distance_km      0.91422    #> as.factor(isoweek(date))16:distance_km      0.11719    #> as.factor(isoweek(date))17:distance_km      0.88786    #> as.factor(isoweek(date))18:distance_km      0.55945    #> as.factor(isoweek(date))19:distance_km      0.36623    #> as.factor(isoweek(date))21:distance_km      0.97626    #> as.factor(isoweek(date))22:distance_km      0.98818    #> as.factor(isoweek(date))23:distance_km      0.98793    #> as.factor(isoweek(date))24:distance_km      0.96909    #> as.factor(isoweek(date))25:distance_km      0.90915    #> as.factor(isoweek(date))26:distance_km      0.99632    #> as.factor(isoweek(date))27:distance_km      0.85742    #> as.factor(isoweek(date))28:distance_km      0.99216    #> as.factor(isoweek(date))29:distance_km      0.88273    #> as.factor(isoweek(date))30:distance_km      0.89688    #> as.factor(isoweek(date))31:distance_km      0.98437    #> as.factor(isoweek(date))32:distance_km      0.96649    #> as.factor(isoweek(date))33:distance_km      0.94360    #> as.factor(isoweek(date))34:distance_km      0.93427    #> as.factor(isoweek(date))35:distance_km      0.92583    #> as.factor(isoweek(date))36:distance_km      0.94572    #> as.factor(isoweek(date))37:distance_km      0.61058    #> as.factor(isoweek(date))38:distance_km      0.79237    #> as.factor(isoweek(date))39:distance_km      0.94648    #> as.factor(isoweek(date))40:distance_km      0.97521    #> as.factor(isoweek(date))41:distance_km      0.71303    #> as.factor(isoweek(date))43:distance_km           NA    #> as.factor(isoweek(date))14:avg_hr_bpm            NA    #> as.factor(isoweek(date))15:avg_hr_bpm       0.84191    #> as.factor(isoweek(date))16:avg_hr_bpm       0.68769    #> as.factor(isoweek(date))17:avg_hr_bpm       0.84212    #> as.factor(isoweek(date))18:avg_hr_bpm            NA    #> as.factor(isoweek(date))19:avg_hr_bpm       0.85764    #> as.factor(isoweek(date))21:avg_hr_bpm       0.71145    #> as.factor(isoweek(date))22:avg_hr_bpm       0.91626    #> as.factor(isoweek(date))23:avg_hr_bpm       0.61458    #> as.factor(isoweek(date))24:avg_hr_bpm       0.60744    #> as.factor(isoweek(date))25:avg_hr_bpm       0.27163    #> as.factor(isoweek(date))26:avg_hr_bpm       0.07009 .  #> as.factor(isoweek(date))27:avg_hr_bpm       0.83252    #> as.factor(isoweek(date))28:avg_hr_bpm       0.67312    #> as.factor(isoweek(date))29:avg_hr_bpm       0.27541    #> as.factor(isoweek(date))30:avg_hr_bpm       0.54916    #> as.factor(isoweek(date))31:avg_hr_bpm       0.41327    #> as.factor(isoweek(date))32:avg_hr_bpm       0.80053    #> as.factor(isoweek(date))33:avg_hr_bpm       0.54226    #> as.factor(isoweek(date))34:avg_hr_bpm            NA    #> as.factor(isoweek(date))35:avg_hr_bpm       0.78109    #> as.factor(isoweek(date))36:avg_hr_bpm       0.90797    #> as.factor(isoweek(date))37:avg_hr_bpm       0.62365    #> as.factor(isoweek(date))38:avg_hr_bpm       0.52450    #> as.factor(isoweek(date))39:avg_hr_bpm       0.27830    #> as.factor(isoweek(date))40:avg_hr_bpm       0.48882    #> as.factor(isoweek(date))41:avg_hr_bpm            NA    #> as.factor(isoweek(date))43:avg_hr_bpm            NA    #> as.factor(isoweek(date))14:avg_inclination       NA    #> as.factor(isoweek(date))15:avg_inclination       NA    #> as.factor(isoweek(date))16:avg_inclination  0.07087 .  #> as.factor(isoweek(date))17:avg_inclination       NA    #> as.factor(isoweek(date))18:avg_inclination       NA    #> as.factor(isoweek(date))19:avg_inclination  0.36091    #> as.factor(isoweek(date))21:avg_inclination  0.26845    #> as.factor(isoweek(date))22:avg_inclination  0.63664    #> as.factor(isoweek(date))23:avg_inclination  0.39263    #> as.factor(isoweek(date))24:avg_inclination  0.46222    #> as.factor(isoweek(date))25:avg_inclination  0.24124    #> as.factor(isoweek(date))26:avg_inclination  0.40844    #> as.factor(isoweek(date))27:avg_inclination  0.86206    #> as.factor(isoweek(date))28:avg_inclination       NA    #> as.factor(isoweek(date))29:avg_inclination  0.77908    #> as.factor(isoweek(date))30:avg_inclination  0.69319    #> as.factor(isoweek(date))31:avg_inclination  0.88137    #> as.factor(isoweek(date))32:avg_inclination  0.16673    #> as.factor(isoweek(date))33:avg_inclination  0.96866    #> as.factor(isoweek(date))34:avg_inclination       NA    #> as.factor(isoweek(date))35:avg_inclination  0.86181    #> as.factor(isoweek(date))36:avg_inclination  0.84713    #> as.factor(isoweek(date))37:avg_inclination  0.58066    #> as.factor(isoweek(date))38:avg_inclination  0.77913    #> as.factor(isoweek(date))39:avg_inclination  0.46301    #> as.factor(isoweek(date))40:avg_inclination  0.54523    #> as.factor(isoweek(date))41:avg_inclination       NA    #> as.factor(isoweek(date))43:avg_inclination       NA    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.7884 on 56 degrees of freedom #> Multiple R-squared:  0.8664, Adjusted R-squared:  0.6279  #> F-statistic: 3.632 on 100 and 56 DF,  p-value: 3.102e-07 plot(fit_calendar_week_and_more)"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"elasticnet","dir":"Articles","previous_headings":"Analyses > Linear Models","what":"ElasticNet","title":"Data Analyses","text":"order identify predictors important, ElasticNet fit can tried. point keep mind average inclination important predictor, values small, result rather large model coefficient. Therefore, make coefficients visible trace plot, avg_inclination value scaled factor 100 (.e. average inclination 1 now corresponds 1% inclination).   can seen, Lasso regression, algorithm create model using 11 predictors (intercept) 1 SE λ\\lambda, minimum MSE λ\\lambda: However, models lot variables probably relatively strongly correlated (e.g. heart rate variables, time distance variables): happen eliminate time_min keep avg_hr_bpm heart rate variables?  now get model 5 (3) parameters minimum (1se) lambda, .e. minimum MSE lambda use available predictors (distance, inclination, temperature, average heart rate, days since last training), whereas 1se lambda ignore temperature days since last training effects:","code":"numerical_track_components <- corrected_tracks |>   select(!date & !previous_training_date & !weekday & !samples & !altitude_gain_m) |>   mutate(avg_inclination = avg_inclination * 100) # scale avg. inclination to %  training_set_ratio <- 0.7 training_set_indices <-    sample(1:nrow(numerical_track_components),          nrow(numerical_track_components) * training_set_ratio) |>   sort() training_set <- numerical_track_components[training_set_indices,] test_set <- numerical_track_components[setdiff(1:nrow(numerical_track_components), training_set_indices),]  # glmnet mixing param (hyperparameter; should be tuned instead of hard-coded) # for now: alpha = 1, i.e. Lasso regression (0 = Ridge; 0 < alpha < 1 = mixed) alpha <- 1  fit_glm <- glmnet(   x = training_set |> na.omit() |> select(!speed_km_h),   y = training_set |> na.omit() |> select(speed_km_h) |> as.matrix(),   alpha = alpha) cv_glm <- cv.glmnet(   x = training_set |> na.omit() |> select(!speed_km_h) |> as.matrix(),   y = training_set |> na.omit() |> select(speed_km_h) |> as.matrix(),   alpha = alpha) plot(fit_glm, xvar = \"lambda\") plot(cv_glm) coef(fit_glm, cv_glm$lambda.1se) #> 13 x 1 sparse Matrix of class \"dgCMatrix\" #>                                        s1 #> (Intercept)                  24.544688191 #> distance_km                   0.222572784 #> time_min                     -0.096183174 #> avg_inclination              -3.157811718 #> temperature_c                -0.010519095 #> avg_hr_bpm                    0.051116808 #> below_zones_min               0.017428942 #> zone1_min                    -0.028204552 #> zone2_min                    -0.010900509 #> zone3_min                     .           #> zone4_min                    -0.035141159 #> above_zones_min              -0.226121274 #> days_since_previous_training -0.001913364 coef(fit_glm, cv_glm$lambda.min) #> 13 x 1 sparse Matrix of class \"dgCMatrix\" #>                                        s1 #> (Intercept)                  23.174671976 #> distance_km                   0.312168642 #> time_min                     -0.140060373 #> avg_inclination              -2.829044363 #> temperature_c                -0.007161805 #> avg_hr_bpm                    0.056357324 #> below_zones_min               0.037595273 #> zone1_min                    -0.016642557 #> zone2_min                    -0.006091218 #> zone3_min                     .           #> zone4_min                    -0.028929052 #> above_zones_min              -0.190123416 #> days_since_previous_training -0.001988406 cor(numerical_track_components) #>                              distance_km    time_min avg_inclination #> distance_km                   1.00000000  0.99474215      0.33422876 #> time_min                      0.99474215  1.00000000      0.37183666 #> avg_inclination               0.33422876  0.37183666      1.00000000 #> temperature_c                -0.19636208 -0.18316844     -0.07903338 #> speed_km_h                   -0.32500914 -0.40933582     -0.59341356 #> avg_hr_bpm                   -0.03815031 -0.08038793      0.08161380 #> below_zones_min               0.40972476  0.45401028      0.23265284 #> zone1_min                     0.54084746  0.59348768      0.20371427 #> zone2_min                     0.86476066  0.88317090      0.23984065 #> zone3_min                     0.84223292  0.81063842      0.30831494 #> zone4_min                     0.22653389  0.21070544      0.28612873 #> above_zones_min              -0.04612616 -0.04857525     -0.03472193 #> days_since_previous_training          NA          NA              NA #>                              temperature_c  speed_km_h  avg_hr_bpm #> distance_km                    -0.19636208 -0.32500914 -0.03815031 #> time_min                       -0.18316844 -0.40933582 -0.08038793 #> avg_inclination                -0.07903338 -0.59341356  0.08161380 #> temperature_c                   1.00000000 -0.02038533  0.01996374 #> speed_km_h                     -0.02038533  1.00000000  0.42046295 #> avg_hr_bpm                      0.01996374  0.42046295  1.00000000 #> below_zones_min                -0.04451513 -0.50554421 -0.64326362 #> zone1_min                      -0.06514123 -0.64175561 -0.69347190 #> zone2_min                      -0.11765521 -0.45588197 -0.36525954 #> zone3_min                      -0.19647189 -0.04905263  0.38113546 #> zone4_min                      -0.08662956  0.01870542  0.60010805 #> above_zones_min                -0.08093673  0.05433833  0.08594706 #> days_since_previous_training            NA          NA          NA #>                              below_zones_min   zone1_min   zone2_min #> distance_km                       0.40972476  0.54084746  0.86476066 #> time_min                          0.45401028  0.59348768  0.88317090 #> avg_inclination                   0.23265284  0.20371427  0.23984065 #> temperature_c                    -0.04451513 -0.06514123 -0.11765521 #> speed_km_h                       -0.50554421 -0.64175561 -0.45588197 #> avg_hr_bpm                       -0.64326362 -0.69347190 -0.36525954 #> below_zones_min                   1.00000000  0.71443392  0.54494475 #> zone1_min                         0.71443392  1.00000000  0.74403267 #> zone2_min                         0.54494475  0.74403267  1.00000000 #> zone3_min                         0.03826689  0.05621131  0.51743968 #> zone4_min                        -0.30409360 -0.28628642 -0.15452658 #> above_zones_min                  -0.08918284 -0.08251139 -0.07327457 #> days_since_previous_training              NA          NA          NA #>                                 zone3_min   zone4_min above_zones_min #> distance_km                   0.842232922  0.22653389    -0.046126156 #> time_min                      0.810638425  0.21070544    -0.048575248 #> avg_inclination               0.308314942  0.28612873    -0.034721934 #> temperature_c                -0.196471886 -0.08662956    -0.080936727 #> speed_km_h                   -0.049052633  0.01870542     0.054338334 #> avg_hr_bpm                    0.381135465  0.60010805     0.085947055 #> below_zones_min               0.038266888 -0.30409360    -0.089182836 #> zone1_min                     0.056211313 -0.28628642    -0.082511390 #> zone2_min                     0.517439678 -0.15452658    -0.073274567 #> zone3_min                     1.000000000  0.40167975    -0.009046145 #> zone4_min                     0.401679752  1.00000000     0.078953318 #> above_zones_min              -0.009046145  0.07895332     1.000000000 #> days_since_previous_training           NA          NA              NA #>                              days_since_previous_training #> distance_km                                            NA #> time_min                                               NA #> avg_inclination                                        NA #> temperature_c                                          NA #> speed_km_h                                             NA #> avg_hr_bpm                                             NA #> below_zones_min                                        NA #> zone1_min                                              NA #> zone2_min                                              NA #> zone3_min                                              NA #> zone4_min                                              NA #> above_zones_min                                        NA #> days_since_previous_training                            1 numerical_track_components_reduced <- numerical_track_components |>   select(!time_min & !below_zones_min & !zone1_min & !zone2_min & !zone3_min & !zone4_min & !above_zones_min)  # same training/test set split and alpha as for the larger glmnet model training_set_reduced <- numerical_track_components_reduced[training_set_indices,] test_set_reduced <- numerical_track_components_reduced[setdiff(1:nrow(numerical_track_components_reduced), training_set_indices),]  fit_glm_reduced <- glmnet(   x = training_set_reduced |> na.omit() |> select(!speed_km_h),   y = training_set_reduced |> na.omit() |> select(speed_km_h) |> as.matrix(),   alpha = alpha) cv_glm_reduced <- cv.glmnet(   x = training_set_reduced |> na.omit() |> select(!speed_km_h) |> as.matrix(),   y = training_set_reduced |> na.omit() |> select(speed_km_h) |> as.matrix(),   alpha = alpha) plot(fit_glm_reduced, xvar = \"lambda\") plot(cv_glm_reduced) coef(fit_glm_reduced, cv_glm_reduced$lambda.min) #> 6 x 1 sparse Matrix of class \"dgCMatrix\" #>                                        s1 #> (Intercept)                  21.388765335 #> distance_km                  -0.011019946 #> avg_inclination              -4.244095168 #> temperature_c                -0.010307268 #> avg_hr_bpm                    0.081755859 #> days_since_previous_training -0.001526533 coef(fit_glm_reduced, cv_glm_reduced$lambda.1se) #> 6 x 1 sparse Matrix of class \"dgCMatrix\" #>                                       s1 #> (Intercept)                  22.62977386 #> distance_km                  -0.00551085 #> avg_inclination              -3.63267457 #> temperature_c                 .          #> avg_hr_bpm                    0.06552551 #> days_since_previous_training  ."},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"random-effects-models","dir":"Articles","previous_headings":"Analyses > Linear Models","what":"Random Effects Models","title":"Data Analyses","text":"Since fitness levels fluctuate years (different loss fitness winter, increasing age, influences), adding random effects might another thing try. baseline, linear model fixed effects distance, inclination, heart rate chosen, seems appropriate ’ve seen previous sections. first idea use random effect year, maybe nested random effect months. tracks labelled (see “Clustering” “Route-specific Linear Models” sections), models random effect route 2-level model random effect years nested effect route also tried: Comparing models, see adding random effect route (fit_random_track) better fixed baseline model alone. However, adding random effect year results better model, multi-level models nested effects month track even better. However, random effects rather small, example, nested year/month model, standard deviations random year month effects less 0.6 0.3, respectively, standard deviation residual errors almost 0.7: Note basic random effects tried far (.e. random intercepts), also worth investigating adding random slopes, e.g. fitting model random effect average heart rate, depending year. far explored , due time constraints.","code":"tracks_year_month <- corrected_tracks |>   left_join(track_classes, join_by(date)) |>   mutate(     year = year(date),     month = month(date)) |>   filter(!is.na(track))  fit_baseline <- gls(speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm, data = tracks_year_month)  fit_random_year <- lme(   fixed = speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm,   random = ~ 1 | year,   data = tracks_year_month) fit_random_year_month <- lme(   fixed = speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm,   random = ~ 1 | year/month,   data = tracks_year_month)  fit_random_track <- lme(   fixed = speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm,   random = ~ 1 | track,   data = tracks_year_month) fit_random_year_track <- lme(   fixed = speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm,   random = ~ 1 | year/track,   data = tracks_year_month)  anova(fit_baseline, fit_random_year, fit_random_year_month) #>                       Model df      AIC      BIC    logLik   Test   L.Ratio #> fit_baseline              1  5 384.7310 399.6147 -187.3655                  #> fit_random_year           2  6 358.1971 376.0575 -173.0985 1 vs 2 28.533958 #> fit_random_year_month     3  7 352.7764 373.6135 -169.3882 2 vs 3  7.420717 #>                       p-value #> fit_baseline                  #> fit_random_year        <.0001 #> fit_random_year_month  0.0064 anova(fit_baseline, fit_random_year, fit_random_year_track) #>                       Model df      AIC      BIC    logLik   Test   L.Ratio #> fit_baseline              1  5 384.7310 399.6147 -187.3655                  #> fit_random_year           2  6 358.1971 376.0575 -173.0985 1 vs 2 28.533958 #> fit_random_year_track     3  7 352.7737 373.6109 -169.3869 2 vs 3  7.423347 #>                       p-value #> fit_baseline                  #> fit_random_year        <.0001 #> fit_random_year_track  0.0064 anova(fit_baseline, fit_random_track) #>                  Model df      AIC      BIC    logLik   Test L.Ratio p-value #> fit_baseline         1  5 384.7310 399.6147 -187.3655                        #> fit_random_track     2  6 384.5631 402.4235 -186.2816 1 vs 2 2.16791  0.1409 summary(fit_random_year_month) #> Linear mixed-effects model fit by REML #>   Data: tracks_year_month  #>        AIC      BIC    logLik #>   352.7764 373.6135 -169.3882 #>  #> Random effects: #>  Formula: ~1 | year #>         (Intercept) #> StdDev:   0.6237785 #>  #>  Formula: ~1 | month %in% year #>         (Intercept)  Residual #> StdDev:   0.3546791 0.6572115 #>  #> Fixed effects:  speed_km_h ~ distance_km + avg_inclination + avg_hr_bpm  #>                     Value Std.Error  DF    t-value p-value #> (Intercept)       24.0425   1.60039 117  15.022919  0.0000 #> distance_km       -0.0137   0.00421 117  -3.265322  0.0014 #> avg_inclination -422.7348  40.81293 117 -10.357865  0.0000 #> avg_hr_bpm         0.0605   0.01074 117   5.627163  0.0000 #>  Correlation:  #>                 (Intr) dstnc_ avg_nc #> distance_km      0.074               #> avg_inclination -0.166 -0.391        #> avg_hr_bpm      -0.950 -0.062 -0.082 #>  #> Standardized Within-Group Residuals: #>        Min         Q1        Med         Q3        Max  #> -2.4187433 -0.6322553 -0.0592517  0.5322350  3.1249577  #>  #> Number of Observations: 149 #> Number of Groups:  #>            year month %in% year  #>               6              29"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"pca","dir":"Articles","previous_headings":"Analyses","what":"PCA","title":"Data Analyses","text":"get impression variables important, can principal component analysis:  can seen scree plot, first two principal components explain almost 60% total variance data, next five principal components still explaining 5 10 percent , last six components explaining less 5% total variance. Looking bi-plots combinations first seven components, can get feeling components mean:          two important components seem correspond mostly distance/altitude/inclination-related variables (PC1), heart rate-related variables (PC2), really surprising, seeing also relevant predictors seen e.g. linear models. striking, though, relatively clean grouping data points bi-plot first two components, warrants investigation.","code":"numerical_track_components_pca <- corrected_tracks |>   mutate(weekday = as.numeric(weekday)) |>   select(!date & !previous_training_date & !samples) pca <- prcomp(~ ., data = numerical_track_components_pca, scale = TRUE) pca |>   tidy(\"pcs\") |>    ggplot(aes(x = PC, y = percent)) +   geom_col() +   labs(x = \"PC\", y = \"Explained Variance\") biplot(pca, choices = 1:2, scale = 0) biplot(pca, choices = 2:3, scale = 0) biplot(pca, choices = 3:4, scale = 0) biplot(pca, choices = 4:5, scale = 0) biplot(pca, choices = 5:6, scale = 0) biplot(pca, choices = 6:7, scale = 0) biplot(pca, choices = c(1,3), scale = 0) biplot(pca, choices = c(1,4), scale = 0) biplot(pca, choices = c(2,4), scale = 0)"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"clustering","dir":"Articles","previous_headings":"Analyses","what":"Clustering","title":"Data Analyses","text":"clusters observed PCA biplot, next question clustering reveals anything interesting. First, data preparation: clustering, need numeric data, without NA values, variables scale. first approach Gaussian mixture model:  Since plot matrix somewhat hard read, let’s plot track distance vs speed, colored clusters:  appears Gaussian mixture model seems clustered data primarily track length. Maybe different clustering algorithm finds classes? Let’s try density-based spatial clustering. find good clustering parameters, start low minPts value, try values eps seem promising k-nearest-neighbor-distance-plot:  k = 1 corresponds minPts value 2, values ablines plot tried . red line (corresponding ε\\varepsilon, .e. eps value, 2.1) results three clusters (fourth group “noise” data points):  Higher density values (.e. higher values eps parameter, higher values k k-NN plot) need different eps values, however, experimenting different k (thus minPts) values, well different eps values resulted fewer clusters, time one “real” one noise cluster. Even three clusters , see classification seems mostly based track distance.","code":"scaled_tracks <- corrected_tracks |>   mutate(weekday = as.numeric(weekday)) |>   select(!date & !previous_training_date & !samples) |>   scale() |>   as_tibble() |>   na.omit() clusters_gaussian_mix <- Mclust(scaled_tracks) plot(clusters_gaussian_mix, what = \"classification\") scaled_tracks |>   mutate(cluster = factor(clusters_gaussian_mix$classification)) |>   ggplot(aes(x = distance_km, y = speed_km_h, color = cluster)) +   geom_point() +   labs(x = \"Standardized Distance\", y = \"Standardized Speed\", color = \"Cluster\") +   ggtitle(\"Gaussian Mixture Model Clustering\") kNNdistplot(scaled_tracks, k = 1) abline(h = 2.1, col = \"red\") abline(h = 0.5, col = \"blue\",lty = 2) abline(h = 2.55, col = \"blue\",lty = 2) abline(h = 3.25, col = \"blue\",lty = 2) abline(h = 4.1, col = \"blue\",lty = 2) clusters_db <- dbscan(scaled_tracks, eps = 2.1, minPts = 2)  scaled_tracks |>   mutate(cluster = factor(clusters_db$cluster)) |>   ggplot(aes(x = distance_km, y = speed_km_h, color = cluster)) +   geom_point() +   labs(x = \"Standardized Distance\", y = \"Standardized Speed\", color = \"Cluster\") +   ggtitle(\"Density-Based Spatial Clustering\")"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"route-specific-linear-models","dir":"Articles","previous_headings":"Analyses","what":"Route-specific Linear Models","title":"Data Analyses","text":"results clustering attempts (discussions intermediate presentation), tracks manually classified, based route driven, (one particular route) also direction route driven (routes ever driven one direction). result much better comparability tracks group, since differences among routes (easily gleaned data) can eliminated just comparing tracks using route. , let’s try fitting linear model , time route-specific one. ’ll arbitrarily pick tracks 1, 2, 4 (25, 40, 60 kilometers, respectively) modelling. get better sense chosen tracks: chosen tracks purple, blue, green tracks following map:  Selecting tracks: Since route now always tracks group, distance inclination always , therefore won’t able predict variations speed. Thus, let’s try model using heart rate temperature:    three routes, see temperature significant effect. , try find training effect course season, however, selected tracks now fewer data points per route: 10 tracks group 2, tracks groups 1 4 55 52 observations, observations group 4 almost later part season, great modeling:   class 1 tracks 3 observations October, overall number available data points group looks better, let’s try create model group:  , significant effect can found. Considering model using heart rate temperature explained 40% variance, without obvious training effect course season, probably factors influencing average speed available data. environmental factors (e.g. wind), fitness-related factors (e.g. influences trainings recorded). case, available data seems insufficient accurately predict average speed track, somewhat certain statement seeming “higher average heart rate (.e. higher training effort) correlates higher average speed”, seems logical, even without looking data.","code":"track_linestrings |>   left_join(track_classes, join_by(date)) |>   filter(!is.na(track)) |>   ggplot() +   geom_sf(aes(color = track)) +   scale_color_viridis_c(option = \"turbo\") labeled_tracks <- corrected_tracks |>   left_join(track_classes, join_by(date))  tracks_1 <- labeled_tracks |>   filter(track == 1) tracks_2 <- labeled_tracks |>   filter(track == 2) tracks_4 <- labeled_tracks |>   filter(track == 4) fit_track_1 <- lm(speed_km_h ~ avg_hr_bpm + temperature_c, data = tracks_1) summary(fit_track_1) #>  #> Call: #> lm(formula = speed_km_h ~ avg_hr_bpm + temperature_c, data = tracks_1) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.13855 -0.51188 -0.06761  0.34820  2.29499  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   18.71064    1.71732  10.895 4.95e-15 *** #> avg_hr_bpm     0.06522    0.01192   5.473 1.29e-06 *** #> temperature_c  0.03112    0.03086   1.008    0.318     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.721 on 52 degrees of freedom #> Multiple R-squared:  0.4011, Adjusted R-squared:  0.3781  #> F-statistic: 17.41 on 2 and 52 DF,  p-value: 1.627e-06 plot(fit_track_1) fit_track_2 <- lm(speed_km_h ~ avg_hr_bpm + temperature_c, data = tracks_2) summary(fit_track_2) #>  #> Call: #> lm(formula = speed_km_h ~ avg_hr_bpm + temperature_c, data = tracks_2) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.31001 -0.06857  0.05155  0.12025  0.24216  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   17.06636    2.02651   8.422 6.56e-05 *** #> avg_hr_bpm     0.07855    0.01511   5.198  0.00126 **  #> temperature_c -0.03064    0.02948  -1.039  0.33326     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.2064 on 7 degrees of freedom #> Multiple R-squared:  0.7946, Adjusted R-squared:  0.7359  #> F-statistic: 13.54 on 2 and 7 DF,  p-value: 0.003928 plot(fit_track_2) fit_track_4 <- lm(speed_km_h ~ avg_hr_bpm + temperature_c, data = tracks_4) summary(fit_track_4) #>  #> Call: #> lm(formula = speed_km_h ~ avg_hr_bpm + temperature_c, data = tracks_4) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.4289 -0.4170  0.1001  0.6196  1.4331  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   11.65598    2.63503   4.423 5.40e-05 *** #> avg_hr_bpm     0.10733    0.01654   6.489 4.11e-08 *** #> temperature_c  0.00604    0.03664   0.165     0.87     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.8631 on 49 degrees of freedom #> Multiple R-squared:  0.4682, Adjusted R-squared:  0.4465  #> F-statistic: 21.57 on 2 and 49 DF,  p-value: 1.908e-07 plot(fit_track_4) tracks_1 |> ggplot(aes(x = month(date))) + geom_bar() tracks_4 |> ggplot(aes(x = month(date))) + geom_bar() tracks_1_speed_month <- tracks_1 |>   mutate(month = as.factor(month(date))) |>   select(speed_km_h, month)  fit_tracks_1_month <- lm(speed_km_h ~ month, data = tracks_1_speed_month) summary(fit_tracks_1_month) #>  #> Call: #> lm(formula = speed_km_h ~ month, data = tracks_1_speed_month) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.56163 -0.49759 -0.05842  0.58971  1.77622  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 28.98822    0.28323 102.348   <2e-16 *** #> month5       0.01964    0.36845   0.053    0.958     #> month6      -0.90112    0.41288  -2.183    0.034 *   #> month7      -0.02002    0.47394  -0.042    0.966     #> month8       0.49069    0.41288   1.188    0.240     #> month9      -0.32493    0.40055  -0.811    0.421     #> month10     -0.91418    0.56646  -1.614    0.113     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.8497 on 48 degrees of freedom #> Multiple R-squared:  0.2322, Adjusted R-squared:  0.1362  #> F-statistic: 2.419 on 6 and 48 DF,  p-value: 0.04008 plot(fit_tracks_1_month)"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/analyses.html","id":"dynamic-time-warping","dir":"Articles","previous_headings":"Analyses","what":"Dynamic Time Warping","title":"Data Analyses","text":"Another technique suggested discussion mid-term presentation dynamic time warping. Tracks along route time-warped, resulting mappings analyzed find parts route low high variation among tracks. Due time constraints, finished yet, still much work progress.","code":"tracks_1_fastest <- tracks_1 |> slice_min(time_min) |> pull(date) tracks_1_slowest <- tracks_1 |> slice_max(time_min) |> pull(date)  t1f <- track_details |>   filter(date == tracks_1_fastest) |>   select(latitude, longitude) t1s <- track_details |>    filter(date == tracks_1_slowest) |>   select(latitude, longitude) a <- dtw(t1s, t1f, keep = TRUE) plot(a, type = \"alignment\") plot(a, type = \"density\") #plot(a, type = \"two\", offset = -200) tracks_2_fastest <- tracks_2 |> slice_min(time_min) |> pull(date) tracks_2_slowest <- tracks_2 |> slice_max(time_min) |> pull(date)  t2f <- track_details |>   filter(date == tracks_2_fastest) |>   select(latitude, longitude) t2s <- track_details |>    filter(date == tracks_2_slowest) |>   select(latitude, longitude) b <- dtw(t2s, t2f, keep = TRUE) plot(b, type = \"alignment\") plot(b, type = \"density\") #plot(a, type = \"two\", offset = -200) tracks_4_fastest <- tracks_4 |> slice_min(time_min) |> pull(date) tracks_4_slowest <- tracks_4 |> slice_max(time_min) |> pull(date)  t4f <- track_details |>   filter(date == tracks_4_fastest) |>   select(latitude, longitude) t4s <- track_details |>    filter(date == tracks_4_slowest) |>   select(latitude, longitude) c <- dtw(t4s, t4f, keep = TRUE) plot(c, type = \"alignment\") plot(c, type = \"density\") #plot(a, type = \"two\", offset = -200)"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Exploratory Analysis of Road Bike Trip Data","text":"final module CAS ASDS practical project. topic project can freely chosen students, e.g. using data work environment elsewhere. data chose final project data collected road bike trips years 2018 2023. Data collected using GPS-enabled bike computer, complementary sensors heart rate, cadence, speed data. total, preprocessed data comprises approximately 160000 data points, collected 157 trips. actual number trips seasons higher, however, due data corruption bike computer’s memory, unknown number trip recordings lost. Figure shows number tracks year data set, suggesting data block (data blocks) containing records 2022 2023 lost. Available trip data year month Figure shows geographic component available data map, tracks red. Routes driven frequently appear saturated, rarely-driven routes appear lighter (e.g. route lake Thun appears data set). Geographic track data (red) map cantons Berne Fribourg Since data collected purpose project, .e. data controlled experiment, well-formed desirable ideal analysis. Instead, project exploratory analysis available data.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"analyses","dir":"Articles","previous_headings":"","what":"Analyses","title":"Exploratory Analysis of Road Bike Trip Data","text":"data time series, however, due uneven temporal spacing data points, missing values, etc., methods learned class used case. reason methods attempted, mainly linear models different sorts, introduced lectures mixed-effects models (“Lineare gemischte Modelle”, Vock (2023)), analysis high-dimensional data (“Analyse hochdimensionaler Daten”, Städler (2024)), methods introduced lecture unsupervised learning (“Unüberwachtes Lernen und Dimensionsreduktion”, Dümbgen (2024)). approaches problematic (due data correlated degree, fundamental nature data time series, analyzed using methods designed data), get first impression analyses performed still okay, results still valid. code additional description analyses can found vignette(\"analyses\") package accompanying document. report mainly present results analyses, along remarks conclusions.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"global-linear-models","dir":"Articles","previous_headings":"Analyses","what":"Global Linear Models","title":"Exploratory Analysis of Road Bike Trip Data","text":"first approach fit global linear models, .e. models using data. focus finding effects influencing average speed track. Questions tried answer : effect temperature? effects track length, average inclination, heart rate? previous track (.e. previous training) significant impact / aspect previous track impact (previous track length/inclination/heart rate, time since previous training, …)? training effect course season, .e. average speed increase course year?","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"temperature-effects","dir":"Articles","previous_headings":"Analyses > Global Linear Models","what":"Temperature Effects","title":"Exploratory Analysis of Road Bike Trip Data","text":"first model using average temperature predictor average speed show significant effect. original idea behind fitting model based subjective feeling warmer temperatures lead lower speed. temperature coefficient fitted model indicate tendency, however, ’s p-value large might pure chance. Additionally, coefficient small even significant, temperature fluctuations within reasonable limits barely influence average speed. tiny effect actually present, much data needed detect degree statistical significance, however. Another aspect consider assumed “lower temperatures mean higher speed” relationship simplistic: probably optimal temperature, average speed decreases . relationship modeled simply fitting straight line data. attempt made fit splines temperature data, result viable models, either. Slightly better-fitting models probably achieved using splines, however, due time constraints ideas pursued . Instead, focused trying find patterns data, since results obtained trying fit model temperature seem promising.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"effects-of-distance-inclination-and-heart-rate","dir":"Articles","previous_headings":"Analyses > Global Linear Models","what":"Effects of Distance, Inclination, and Heart Rate","title":"Exploratory Analysis of Road Bike Trip Data","text":"second model fitted based track’s total distance, average inclination, average heart rate. Intuitively, relatively promising model explain average speed. model can serve baseline reference compare models . model explains 58% total variance data, shows average inclination average heart rate highly significant predictors. Somewhat contrary initial expectation, though, track’s total distance significant effect, least usual 5% confidence threshold: distance effect p-Value just 5%. model seems fit data relatively well, outliers visible diagnostic plots. obvious outliers caused tracks rarely driven (e.g. route track 2, driven July 31st, 2018, driven ), highlighting difference tracks driven frequently.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"effects-of-previous-training-sessions","dir":"Articles","previous_headings":"Analyses > Global Linear Models","what":"Effects of Previous Training Sessions","title":"Exploratory Analysis of Road Bike Trip Data","text":"Since one training session can influence subsequent training session (e.g. enough time recovery sessions, recovering first session, overall fitness better), attempt made model effect. important predictors probably still track’s distance, inclination, heart rate, previous track’s details (.e. previous track’s distance, inclination, heart rate) also considered. Additionally, time training sessions included model, e.g. two tracks t1t_1 t2t_2 driven 2 days apart, effect t1t_1 t2t_2 can different two tracks driven 20 days apart. fitted model explains 3% additional variance data compared previous, simpler model. However, time since previous track, previous track’s distance significant. Considering track distance strongly correlates duration track, seem logical use training time previous track predictor instead previous track’s distance, however, approach produces model slightly lower R2R^2, previous track’s duration actually less significant predictor distance. Overall, though, extended model useful. complex less explainable (example, average speed decreases increasing time since last training, increases previous training’s distance; thus, track driven day driving long track higher average speed track driven days shorter track, match past experiences). Additionally, diagnostics look bit worse simpler model (QQ-plot residuals looks bit worse, residuals-vs-leverage plot shows observations higher leverage ). drawbacks result model explains additional 3% variance.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"effects-of-the-training-season","dir":"Articles","previous_headings":"Analyses > Global Linear Models","what":"Effects of the Training Season","title":"Exploratory Analysis of Road Bike Trip Data","text":"Another approach take previous trainings account check effects training season: within given year, tracks later year higher average speed tracks earlier year? Assuming fitness level lowest directly winter, rise course season, .e. training sessions performed, higher fitness level . Multiple models evaluated approach, using month, final one using calendar week. Starting simplest model using just month predictor, significant effect. Considering increase fitness probably goes along driving (average) longer tracks, exhausting, therefore reducing average speed, additional predictors needed detect effect training progress season. Thus, predictors used basic model added back, together interactions month. Thus, example, depending training progress season (.e. month), average heart rate different effect per month. model already 32 coefficients, compared just four coefficients basic model. However, three coefficients actually NA values (interaction effects October), remaining coefficients, four (apart intercept) significant (5% confidence level). One significant effects average inclination (already significant basic model), three significant effects interaction effects. obvious pattern effects significant (inclination), makes model harder explain basic one, offering advantage explaining 71% variance. diagnostics look bit worse complex model, though, QQ-plot residuals slightly worse basic model, residuals-vs-leverage-plot noticeably worse. Attempting fit model season higher temporal resolution (using calendar week instead month) pointless, though: data 29 different calendar weeks, resulting 28 coefficients calendar weeks alone, plus additional 28 coefficients interaction, coefficients effects, total 116 coefficients. , 15 result NAs, however, remaining non-NA coefficients, one significant. Even intercept inclination significant model, diagnostic plots look clearly worse basic month-based models. difficulty finding effects training season probably least part caused lack data: six seasons data, least three seasons data incomplete: first year (2018), data start season (bike computer bought mid-season), 2022 2023 missing data due memory corruption bike computer, (least) later part 2022 season beginning 2023 season missing. Even seasons completely available, still six seasons worth data extrapolate. missing data, choice removing incomplete seasons (trying extrapolate even less data just remaining three seasons), using data potentially skewing results. latter option chosen, former might something try future. training season-based models fitted far, one using month interactions seems usable, however, due model’s complexity basic model still seems like robust useful choice (despite explaining quite bit less variance).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"lasso-regression-using-elasticnet","dir":"Articles","previous_headings":"Analyses > Global Linear Models","what":"Lasso Regression using ElasticNet","title":"Exploratory Analysis of Road Bike Trip Data","text":"fitting preceding models, used manually-selected predictors, tried Lasso regression (Tay, Narasimhan, Hastie 2023) see predictors selected. Since predictors available used now, idea important predictors considered, now found Lasso regression. first round Lasso regression, using 12 available predictors model average speed, one predictor (one heart rate zones) eliminated Lasso. model still relatively large, many predictors highly correlated: heart rate-based predictors correlated , track’s time distance also highly correlated. eliminating correlated predictors (keeping average heart rate heart rate-based predictor, keeping distance time), reduce number available predictors 5. Trying Lasso regression reduced set predictors results model based distance, inclination, heart rate. exactly set predictors already used basic model, .e. initial selection seems appropriate. also means, however, Lasso regression really help improve models created , confirms gut feeling based basic model constructed.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"random-effects","dir":"Articles","previous_headings":"Analyses > Global Linear Models","what":"Random Effects","title":"Exploratory Analysis of Road Bike Trip Data","text":"last thing try global linear model add random effects (Pinheiro, Bates, R Core Team 2023). example, assume model based distance, inclination, heart rate (.e. basic model) good fit data, slight differences average speed among years, e.g. caused different decreases fitness winter. modelled random effect year. Another possibility random effect model differences among different routes explained differences route length inclination. Furthermore, effects nested, e.g. route-specific random effect varies among years, additional random effects month within year. nested effects explain e.g. situation certain routes seem easier years, fluctuations fitness year (.e. per month). Fitting models shows model random effect route better basic model, however, model random effect year quite certainly better basic model. nested models (.e. route year, month year) also slightly better model just random effect year. three mixed models perform better basic model, simple model just random effect year probably appealing one: simplest three, random variation years seems intuitively plausible. nested models slightly better performance-wise, harder understand. Furthermore, nested random effects appear less intuitive. Considering example routes fixed, random effect route seems less likely deterministic, fixed effect route. random effect might just work compensate route parameters available data. Similarly, instead random effect month, sort fixed effect seem plausible (fitness training effect sort), , random effect might compensate relationship need additional data model fixed effect.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"principal-component-analysis","dir":"Articles","previous_headings":"Analyses","what":"Principal Component Analysis","title":"Exploratory Analysis of Road Bike Trip Data","text":"trying fit linear models data mixed success, tried determine main sources variance data. , principal component analysis done 15 variables. two important principal components explain almost 60% total variance, first component’s main influencing factors time, distance, inclination, altitude gain, second component’s main influences heart rate-related variables. Considering predictors found statistically relevant linear models, seem surprising. surprising, though, biplot first two principal components, showed two clearly separated groups observations.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"clustering","dir":"Articles","previous_headings":"Analyses","what":"Clustering","title":"Exploratory Analysis of Road Bike Trip Data","text":"seeing distinct groups observations PCA biplots, next thing tried clustering data points. first approach Gaussian mixture model (Scrucca et al. 2023), can fitted without additional parameters, .e. given data automatically determine clustering without inputs. resulting clustering based four groups. looking groups speed-vs-distance plot, grouping seems based mostly distance (, given data, good indicator route). second clustering approach tried DBSCAN (Hahsler Piekenbrock 2023). algorithm, preparatory k-nearest-neighbor distance computation performed, value ε\\varepsilon eyeballed resulting plot. Different values k ε\\varepsilon tried, however, time result clustering two three groups (.e. one two actual classes, plus one “noise” class). k=1k = 1 ε=2.1\\varepsilon = 2.1, three classes “noise” class found. , classes clearly based track distance (even obviously Gaussian mixture model). Considering clustering algorithms seem cluster mostly track distance, classification based track’s route seems natural. obvious way classifying tracks, especially considering tracks driven quite often. route-based classification therefore added manually, develop models can use track’s route additional predictor. Additionally, route classification also used random effects fit additional mixed-effects models (see section ).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"route-specific-linear-models","dir":"Articles","previous_headings":"Analyses","what":"Route-specific Linear Models","title":"Exploratory Analysis of Road Bike Trip Data","text":"manually-assigned classes, approaches tried global linear models can retried per-class basis. However, since tracks class trips along route, route-specific information like distance inclination useful predictors models. Furthermore, now substantially fewer tracks can used fit model. frequently-driven route 55 tracks, second- third-driven routes 52, 10 tracks, respectively. reason, three -frequently-driven routes selected try fit basic model . slightly complex model tried frequent route. first attempt simple linear model used average heart rate, temperature model average track speed, since predictors used basic global model applicable looking tracks route. , global model, none three routes significant effect temperature can found. Thus, predictor significant effect average heart rate, increase average speed ca. 0.5 1 km/h every 10 bpm increase average heart rate. diagnostics plots don’t look bad routes > 50 tracks (apart residual QQ-plots, show quite obvious deviations diagonal, one route lower end, higher end values). route 10 observations, however, little data, becomes obvious diagnostics plots. even though model track shows significant effect average heart rate, model useful making predictions. Attempting find training effect course season frequent route finds significant effect, however, might least part due lack data, considering one month least ten observations.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"dynamic-time-warping","dir":"Articles","previous_headings":"Analyses","what":"Dynamic Time-Warping","title":"Exploratory Analysis of Road Bike Trip Data","text":"statistical analysis method, dynamic time-warping (Giorgino 2009) can used map data points one track data points another track, making possible compare even exact number data points. used find parts route vary lot (little) among different tracks route, analyze deviations. Ideas compare tracks along route reference track (e.g. fastest slowest track), compare subsequent tracks . Obvious analysis ideas , , looking influences temperature training progress certain route sections high variability among tracks, e.g. “temperature influence performance particularly steep parts route”. still ongoing, however, since necessary analyses finished time final submission deadline.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Exploratory Analysis of Road Bike Trip Data","text":"quite statistical methods learned CAS applied, overall outcome analysis particularly impressive. Conclusions can drawn relative certainty: track’s average inclination, average heart rate almost certainly influence average speed, track’s distance less important given route, tracks higher average heart rate tend higher average speed temperature seems negligible effect available data, improvement overall fitness course season can concluded fact temperature seem effect, apparent training effect seems surprising (: correspond subjective observations), fact distance seems lower--expected influence. However, strong influence inclination average heart rate seems obvious. also clear, however, models fit well, even though fine-tuning probably improve models degree. least part (assumed) structure data (.e. effects probably sort curved shape, optimal point results taper directions). Another aspect suboptimal fit likely due fact available data lacking (least) two aspects: simply enough observations reliably detect small effects, especially complex models; reasons data loss 2022/2023 seasons, fact data collected six seasons total factors influence performance, like wind, exercise sessions, resting periods (sleep etc.), many . factors measured, though, effects invisibly influence data unpredictable ways. lack data compensated , still possibilities explore. Things attempt future (.e. final submission deadline) improvements linear models (exploring effect certain interactions, e.g. distance inclination, splines curve-shaped fits), continuing experiment dynamic time-warping, taking look advanced time-series models introduced CAS lecture topic (Hayoz Hüsler 2023).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/article.html","id":"appendix-a---data","dir":"Articles","previous_headings":"","what":"Appendix A - Data","title":"Exploratory Analysis of Road Bike Trip Data","text":"raw data used project recorded GPS-enabled bike computer, paired chest strap-style heart rate sensor, combined speed cadence sensor. Data recorded five second intervals. individual tracks (.e. trip recordings) exported CSV files. (slightly censored) raw data available sources R package accompanying document. details data can found package’s vignette(\"data\"), looking documentation data directly, .e. ?tracks, ?track_details, ?track_classes.","code":""},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/articles/data.html","id":"acquisition","dir":"Articles","previous_headings":"","what":"Acquisition","title":"Data","text":"raw data captured using (now discontinued) bike computer model “Sigma ROX GPS 11.0”, additional chest strap heart rate sensor, combined speed cadence sensor (sensors bought bundled bike computer ). data exported using (proprietary) Sigma software, exported CSV files. data set comprises 157 trip recordings (“tracks”), sequence data points taken five second interval. data points aggregated one summarized row per track. Additionally, tracks manually classified route, direction route driven. three data sets available package following names: track_details contains recorded data point sequences tracks (approx. 160k rows) tracks contains summarized track information, one row per track (157 rows) track_classes contains classification information track, .e. class ID direction (157 rows) Tracks identified date, thus , example, summaries tracks extended class labels track, tracks can joined track_classes date key. convenience, two additional data sets included (swiss_cantons swiss_lakes), containing geographic data cantons lakes Switzerland. can used plot geographic frame reference plotting tracks. Since trip routes within canton Berne, canton data KTNR (“Kantonsnummer”) 10 (.e. Berne) probably useful. source geo data Swiss Federal Statistical Office (Bundesamt für Statistik, BfS), raw data can downloaded page.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/data.html","id":"cleaning","dir":"Articles","previous_headings":"","what":"Cleaning","title":"Data","text":"data available package cleaned-version raw data available package sources. Cleanups performed : 0/0 GPS coordinates set NA values. values probably caused sort GPS hiccup, clarify real data available points, prevent accidentally using invalid coordinates computations, set NA. duplicate data points removed. data points one track sequence TrainingTimeAbsolute values. looked like temporary freeze bike computer, obviously-wrong values distance altitude changes rows, first rows kept, others completely removed. Power zone data removed. raw data contained columns power zones, however, power sensor installed calibrated, raw data columns bogus. prevent confusion, data included package data, .e. power zone-related columns removed. uncleaned data still available raw CSV files available package sources, tracks.R file data-raw folder contains code used perform cleanup.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/data.html","id":"geographic-censoring","dir":"Articles","previous_headings":"","what":"Geographic Censoring","title":"Data","text":"Since detailed track data points contain GPS data, start end points tracks show exact starting points trips, .e. address. Therefore, data points start end trip, within certain region, removed. Additionally, tracks adapted, first point censored track time distance 0, deducing true starting point track based censored data points possible (least difficult). approach just cutting parts track resetting first point 0 slightly distorting data, deemed acceptable. initial idea removing first last points , resetting time distance first uncensored point instead adding random noise censor individual tracks keeping average track time distance somewhat intact, pursued complex approach, risk accidentally leaking data deemed higher. raw data tracks available censored form, .e. CSV files data-raw/tracks/censored tracks trimmed start end. original, unmodified raw CSV files publicly available. exact details censoring procedure can found data-raw/tracks.R file.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/articles/data.html","id":"categorizing","dir":"Articles","previous_headings":"","what":"Categorizing","title":"Data","text":"tracks along different routes, routes driven multiple times (much often others). tracks (manually) classified routes, arbitrary numeric identifiers routes. Routes driven get class, thus tracks route class NA. Furthermore, one route driven different directions, tracks along route class, additionally labelled clockwise counter-clockwise. routes ever driven one direction, tracks labelled direction (.e. direction column contains NA). Classification done visually, plotting tracks, storing plots image files, sorting folders. commented code used classification can found data-raw/track_classification.R.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/articles/presentation.html","id":"the-same-model-2--attempt","dir":"Articles","previous_headings":"Analyses","what":"The Same Model, 2. Attempt","title":"Praxismodul CAS ASDS 2024","text":"","code":"summary(fit_corrected) #>  #> Call: #> lm(formula = speed_km_h ~ distance_km + altitude_gain_m + avg_hr_bpm,  #>     data = corrected_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.4012 -0.4991  0.0429  0.5594  2.6588  #>  #> Coefficients: #>                  Estimate Std. Error t value Pr(>|t|)     #> (Intercept)     18.167351   1.392919  13.043  < 2e-16 *** #> distance_km      0.086997   0.014346   6.064 9.94e-09 *** #> altitude_gain_m -0.008541   0.001084  -7.881 5.64e-13 *** #> avg_hr_bpm       0.069361   0.009380   7.394 8.71e-12 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9388 on 153 degrees of freedom #> Multiple R-squared:  0.4825, Adjusted R-squared:  0.4723  #> F-statistic: 47.55 on 3 and 153 DF,  p-value: < 2.2e-16"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/presentation.html","id":"temperature-effects","dir":"Articles","previous_headings":"Analyses","what":"Temperature Effects","title":"Praxismodul CAS ASDS 2024","text":"","code":"summary(fit_temperature) #>  #> Call: #> lm(formula = speed_km_h ~ temperature_c, data = corrected_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.1644 -0.8346  0.0939  0.8662  2.8922  #>  #> Coefficients: #>                Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   28.013494   0.573848  48.817   <2e-16 *** #> temperature_c -0.006994   0.027551  -0.254      0.8     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.296 on 155 degrees of freedom #> Multiple R-squared:  0.0004156,  Adjusted R-squared:  -0.006033  #> F-statistic: 0.06444 on 1 and 155 DF,  p-value: 0.7999"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/presentation.html","id":"effect-of-previous-training","dir":"Articles","previous_headings":"Analyses","what":"Effect of Previous Training","title":"Praxismodul CAS ASDS 2024","text":"","code":"summary(fit_pt) #>  #> Call: #> lm(formula = speed_km_h ~ distance_km + altitude_gain_m + avg_hr_bpm +  #>     days_since_previous_training + distance_km_previous_training +  #>     altitude_gain_m_previous_training, data = augmented_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.2960 -0.4750  0.0799  0.5310  2.6460  #>  #> Coefficients: #>                                     Estimate Std. Error t value Pr(>|t|)     #> (Intercept)                       17.7157517  1.4135832  12.533  < 2e-16 *** #> distance_km                        0.0839005  0.0142507   5.887 2.50e-08 *** #> altitude_gain_m                   -0.0085198  0.0010838  -7.861 7.07e-13 *** #> avg_hr_bpm                         0.0720788  0.0093865   7.679 1.96e-12 *** #> days_since_previous_training      -0.0037392  0.0018366  -2.036   0.0435 *   #> distance_km_previous_training      0.0108701  0.0142031   0.765   0.4453     #> altitude_gain_m_previous_training -0.0004616  0.0010797  -0.428   0.6696     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9267 on 149 degrees of freedom #> Multiple R-squared:  0.506,  Adjusted R-squared:  0.4861  #> F-statistic: 25.44 on 6 and 149 DF,  p-value: < 2.2e-16"},{"path":"https://nils-s.github.io/cas-asds-practical/articles/presentation.html","id":"training-effect-over-the-course-of-the-season","dir":"Articles","previous_headings":"Analyses","what":"Training Effect over the Course of the Season","title":"Praxismodul CAS ASDS 2024","text":"","code":"summary(fit_month) #>  #> Call: #> lm(formula = speed_km_h ~ as.factor(month(date)), data = augmented_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.9479 -0.8291  0.1294  0.8018  3.0219  #>  #> Coefficients: #>                          Estimate Std. Error t value Pr(>|t|)     #> (Intercept)               26.9297     1.2863  20.936   <2e-16 *** #> as.factor(month(date))4    1.2657     1.3314   0.951    0.343     #> as.factor(month(date))5    1.5226     1.3180   1.155    0.250     #> as.factor(month(date))6    0.7667     1.3062   0.587    0.558     #> as.factor(month(date))7    0.6666     1.3118   0.508    0.612     #> as.factor(month(date))8    0.8073     1.3069   0.618    0.538     #> as.factor(month(date))9    1.1544     1.3139   0.879    0.381     #> as.factor(month(date))10   0.7003     1.3491   0.519    0.604     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.286 on 148 degrees of freedom #> Multiple R-squared:  0.05464,    Adjusted R-squared:  0.009931  #> F-statistic: 1.222 on 7 and 148 DF,  p-value: 0.2941 summary(fit_month_and_more) #>  #> Call: #> lm(formula = speed_km_h ~ as.factor(month(date)) * (distance_km +  #>     avg_hr_bpm + altitude_gain_m), data = augmented_tracks) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.29808 -0.37768  0.03974  0.42347  1.80731  #>  #> Coefficients: (3 not defined because of singularities) #>                                            Estimate Std. Error t value Pr(>|t|) #> (Intercept)                               21.602217   4.331986   4.987 1.97e-06 #> as.factor(month(date))4                   11.979342   7.250270   1.652  0.10095 #> as.factor(month(date))5                    1.735518   6.744440   0.257  0.79734 #> as.factor(month(date))6                  -15.428425   5.285295  -2.919  0.00415 #> as.factor(month(date))7                  -13.421991   5.298444  -2.533  0.01252 #> as.factor(month(date))8                   -8.688334   5.071651  -1.713  0.08913 #> as.factor(month(date))9                   -3.169937   5.377458  -0.589  0.55658 #> as.factor(month(date))10                   1.033590   1.108009   0.933  0.35268 #> distance_km                                0.124555   0.055002   2.265  0.02524 #> avg_hr_bpm                                 0.028955   0.030526   0.949  0.34465 #> altitude_gain_m                           -0.008950   0.003715  -2.409  0.01743 #> as.factor(month(date))4:distance_km       -0.027517   0.075370  -0.365  0.71565 #> as.factor(month(date))5:distance_km        0.096736   0.086657   1.116  0.26640 #> as.factor(month(date))6:distance_km        0.221298   0.083428   2.653  0.00901 #> as.factor(month(date))7:distance_km       -0.110274   0.057326  -1.924  0.05664 #> as.factor(month(date))8:distance_km        0.048958   0.061350   0.798  0.42636 #> as.factor(month(date))9:distance_km       -0.075128   0.088159  -0.852  0.39571 #> as.factor(month(date))10:distance_km             NA         NA      NA       NA #> as.factor(month(date))4:avg_hr_bpm        -0.056935   0.049573  -1.149  0.25291 #> as.factor(month(date))5:avg_hr_bpm         0.001212   0.044021   0.028  0.97809 #> as.factor(month(date))6:avg_hr_bpm         0.116332   0.036647   3.174  0.00188 #> as.factor(month(date))7:avg_hr_bpm         0.112295   0.037204   3.018  0.00307 #> as.factor(month(date))8:avg_hr_bpm         0.072590   0.035205   2.062  0.04125 #> as.factor(month(date))9:avg_hr_bpm         0.043710   0.037488   1.166  0.24581 #> as.factor(month(date))10:avg_hr_bpm              NA         NA      NA       NA #> as.factor(month(date))4:altitude_gain_m   -0.003426   0.005268  -0.650  0.51667 #> as.factor(month(date))5:altitude_gain_m   -0.009920   0.005948  -1.668  0.09784 #> as.factor(month(date))6:altitude_gain_m   -0.019151   0.006122  -3.128  0.00218 #> as.factor(month(date))7:altitude_gain_m    0.005902   0.003930   1.502  0.13570 #> as.factor(month(date))8:altitude_gain_m   -0.005552   0.004213  -1.318  0.19000 #> as.factor(month(date))9:altitude_gain_m    0.002707   0.006209   0.436  0.66353 #> as.factor(month(date))10:altitude_gain_m         NA         NA      NA       NA #>                                              #> (Intercept)                              *** #> as.factor(month(date))4                      #> as.factor(month(date))5                      #> as.factor(month(date))6                  **  #> as.factor(month(date))7                  *   #> as.factor(month(date))8                  .   #> as.factor(month(date))9                      #> as.factor(month(date))10                     #> distance_km                              *   #> avg_hr_bpm                                   #> altitude_gain_m                          *   #> as.factor(month(date))4:distance_km          #> as.factor(month(date))5:distance_km          #> as.factor(month(date))6:distance_km      **  #> as.factor(month(date))7:distance_km      .   #> as.factor(month(date))8:distance_km          #> as.factor(month(date))9:distance_km          #> as.factor(month(date))10:distance_km         #> as.factor(month(date))4:avg_hr_bpm           #> as.factor(month(date))5:avg_hr_bpm           #> as.factor(month(date))6:avg_hr_bpm       **  #> as.factor(month(date))7:avg_hr_bpm       **  #> as.factor(month(date))8:avg_hr_bpm       *   #> as.factor(month(date))9:avg_hr_bpm           #> as.factor(month(date))10:avg_hr_bpm          #> as.factor(month(date))4:altitude_gain_m      #> as.factor(month(date))5:altitude_gain_m  .   #> as.factor(month(date))6:altitude_gain_m  **  #> as.factor(month(date))7:altitude_gain_m      #> as.factor(month(date))8:altitude_gain_m      #> as.factor(month(date))9:altitude_gain_m      #> as.factor(month(date))10:altitude_gain_m     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.7569 on 127 degrees of freedom #> Multiple R-squared:  0.7191, Adjusted R-squared:  0.6572  #> F-statistic: 11.61 on 28 and 127 DF,  p-value: < 2.2e-16 summary(fit_calendar_week_and_more) #>  #> Call: #> lm(formula = speed_km_h ~ isoweek(date) * (distance_km + avg_hr_bpm +  #>     altitude_gain_m), data = augmented_tracks) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.2472 -0.4744  0.0738  0.5945  2.4220  #>  #> Coefficients: #>                                 Estimate Std. Error t value Pr(>|t|)     #> (Intercept)                   21.9067086  6.0473912   3.623  0.00040 *** #> isoweek(date)                 -0.1450550  0.2024201  -0.717  0.47475     #> distance_km                    0.2098271  0.0893882   2.347  0.02023 *   #> avg_hr_bpm                     0.0426069  0.0398867   1.068  0.28717     #> altitude_gain_m               -0.0196845  0.0064399  -3.057  0.00266 **  #> isoweek(date):distance_km     -0.0041175  0.0029190  -1.411  0.16046     #> isoweek(date):avg_hr_bpm       0.0010313  0.0013452   0.767  0.44451     #> isoweek(date):altitude_gain_m  0.0003751  0.0002098   1.788  0.07583 .   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9235 on 148 degrees of freedom #> Multiple R-squared:  0.5127, Adjusted R-squared:  0.4897  #> F-statistic: 22.25 on 7 and 148 DF,  p-value: < 2.2e-16"},{"path":[]},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/articles/presentation.html","id":"clustering","dir":"Articles","previous_headings":"Analyses","what":"Clustering","title":"Praxismodul CAS ASDS 2024","text":"Ideas things ?","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nils S.. Author, maintainer.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"S. N (2024). CAS ASDS Practical Project: Exploratory Analysis Road Bike Trip Data. R package version 0.2.0.9000, https://github.com/nils-s/cas-asds-practical.","code":"@Manual{,   title = {CAS ASDS Practical Project: Exploratory Analysis of Road Bike Trip Data},   author = {Nils S.},   year = {2024},   note = {R package version 0.2.0.9000},   url = {https://github.com/nils-s/cas-asds-practical}, }"},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"asds2024nilspractical","dir":"","previous_headings":"","what":"Practical Project for CAS ASDS 2024","title":"Practical Project for CAS ASDS 2024","text":"module contains final practical part Certificate Advanced Studies Advanced Statistical Data Science (CAS ASDS) University Berne class 2024.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"format","dir":"","previous_headings":"","what":"Format","title":"Practical Project for CAS ASDS 2024","text":"practical module packaged R package, everything (data, scripts, reports, …) contained single bundle, analyses reproducible. setup follows suggestions (Marwick, Boettiger, Mullen 2018b, 2018a), (Flight 2014), (Wickham Bryan 2023) (provided less instructions toolchain recommendations based package created). opinions tools (e.g. (Flight 2021) (Landau 2024, 2021)) lighter-weight reproducible research approach, might explore future. inspiration available tools, see (Blischak et al. 2024).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Practical Project for CAS ASDS 2024","text":"can install development version asds2024.nils.practical GitHub : Since documents provided vignettes, probably want clone package sources local directory well: , can directly explore raw data, read documents packaged vignettes.","code":"# install.packages(\"devtools\") # <- for `install_github` to be available uncomment this and run it (unless you've already installed it)  # Notes: # - you probably want to install the suggested dependencies as well, since this package only uses suggested dependencies # - when `install_github`-ing, you need to explicitly specify that you want the vignettes built as well devtools::install_github(   \"nils-s/cas-asds-practical\",   dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\", \"Suggests\"),   build_vignettes = TRUE) git clone https://github.com/nils-s/cas-asds-practical.git"},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"installation-troubleshooting","dir":"","previous_headings":"Installation","what":"Installation Troubleshooting","title":"Practical Project for CAS ASDS 2024","text":"Assuming devtools package installed (install_github available), package cause problems (simply contains little stuff cause problems). However, depends bunch dependencies, installed installing package’s suggested dependencies shown code snippet .","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"problems-when-installing-sf","dir":"","previous_headings":"Installation > Installation Troubleshooting","what":"Problems when Installing sf","title":"Practical Project for CAS ASDS 2024","text":"sf package dependencies (R packages). first thing try (studying error messages, course) make sure prerequisites sf fulfilled (e.g. GEOS, GDAL, PROJ libraries). Fedora machine, following get started: See sf documentation information.","code":"sudo dnf install gdal gdal-devel udunits2-devel proj proj-devel geos geos-devel"},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"compilation-errors-when-installing-source-packages","dir":"","previous_headings":"Installation > Installation Troubleshooting","what":"Compilation Errors when Installing Source Packages","title":"Practical Project for CAS ASDS 2024","text":"installing packages source (common Linux), compilation errors may occur due aggressive compiler flag settings used conjunction C C++ sources Rcpp. case see errors like probably open issue Github/Gitlab/whatever repo package caused error. absolutely go $(R RHOME)/etc/Makeconf change compiler flags, like example removing -Werror=format-security CXX14FLAGS similar ;)","code":"... /usr/local/lib/R/site-library/Rcpp/include/Rcpp/iostream/Rstreambuf.h:53:20: warning: field precision specifier ‘.*’ expects argument of type ‘int’, but argument 2 has type ‘std::streamsize’ {aka ‘long int’} [-Wformat=]    53 |         Rprintf(\"%.*s\", num, s);       |                  ~~^~   ~~~       |                    |    |       |                    int  std::streamsize {aka long int} ... .../include/Rcpp/print.h:30:19: error: format not a string literal and no format arguments [-Werror=format-security] ... ERROR: compilation failed for package ... ..."},{"path":"https://nils-s.github.io/cas-asds-practical/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Practical Project for CAS ASDS 2024","text":"","code":"library(asds2024.nils.practical) vignette(\"get-started\", package = \"asds2024.nils.practical\")"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_data_vs_fitted.html","id":null,"dir":"Reference","previous_headings":"","what":"Visually Evaluate Model — plot_data_vs_fitted","title":"Visually Evaluate Model — plot_data_vs_fitted","text":"Plot values (black) corresponding fitted values (red), according model.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_data_vs_fitted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visually Evaluate Model — plot_data_vs_fitted","text":"","code":"plot_data_vs_fitted(model, ...)"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_data_vs_fitted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visually Evaluate Model — plot_data_vs_fitted","text":"model fitted model plot data vs fitted values. Needs broom::augment()-able. ... Params passed ggplot2::aes(). variables plot, e.g. something like x = var1, y = var2.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_data_vs_fitted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visually Evaluate Model — plot_data_vs_fitted","text":"ggplot2::ggplot() two layers (points jittered x-direction, representing original values (black) fitted values (red))","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_data_vs_fitted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visually Evaluate Model — plot_data_vs_fitted","text":"","code":"plot_data_vs_fitted(lm(mpg ~ disp, data = mtcars), x = disp, y = mpg)  plot_data_vs_fitted(lm(mpg ~ disp + cyl + hp + wt, data = mtcars), x = wt, y = mpg)"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Single Track with a Given Date — plot_track","title":"Plot a Single Track with a Given Date — plot_track","text":"Takes date, collection points, plots track points date one specified. Points NA values latitude /longitude filtered . Remaining points converted to_linestrings() plotting. Return value plot object, .e. additional plot layers can added usual ggplot way.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Single Track with a Given Date — plot_track","text":"","code":"plot_track(track_date, points)"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Single Track with a Given Date — plot_track","text":"track_date date plot track points data.frame tibble (least) date sf geometry column containing point observation","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Single Track with a Given Date — plot_track","text":"basic ggplot2::ggplot() ggplot2::geom_sf() layer track","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/plot_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Single Track with a Given Date — plot_track","text":"","code":"plot_track(lubridate::ymd(\"2020-05-20\"), track_details)"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/summarize_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a Collection of Detailed Track Points Grouped by Date — summarize_tracks","title":"Summarize a Collection of Detailed Track Points Grouped by Date — summarize_tracks","text":"Summarize Collection Detailed Track Points Grouped Date","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/summarize_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a Collection of Detailed Track Points Grouped by Date — summarize_tracks","text":"","code":"summarize_tracks(tracks)"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/summarize_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a Collection of Detailed Track Points Grouped by Date — summarize_tracks","text":"tracks data.frame tibble track detail data points, e.g. track_details","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/summarize_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a Collection of Detailed Track Points Grouped by Date — summarize_tracks","text":"tibble summarizing tracks, one row per date. Values (.e. columns) : date date trip weekday weekday corresponding date; factor English weekday names; computed date, included convenience distance_km length track (kilometers) time_min duration track (minutes) altitude_gain_m total altitude gained track (meters), without compensating altitude lost avg_inclination average inclination track, calculated altitude gain meters / distance m temperature_c median temperature track (degrees Celsius) speed_km_h average speed track (km/h) avg_hr_bpm average heart rate track (beats per minute) below_zones_min time spent heart rate zone 1 (.e. < 60% max. hr / < 109 bpm) (minutes) zone1_min time spent heart rate zone 1 (.e. [60;70)% max. hr / [109;127) bpm) (minutes) zone2_min time spent heart rate zone 2 (.e. [70;80)% max. hr / [127;145) bpm) (minutes) zone3_min time spent heart rate zone 3 (.e. [80;90)% max. hr / [145;164) bpm) (minutes) zone4_min time spent heart rate zone 4 (.e. [90;100)% max. hr / [164;182) bpm) (minutes) above_zones_min time spent heart rate zone 4 (.e. >= 100% max. hr / 182 bpm) (minutes) samples number data point track, .e. number data points aggregated row","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/summarize_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a Collection of Detailed Track Points Grouped by Date — summarize_tracks","text":"","code":"# summarize all detailed data points by date summarize_tracks(track_details) #> # A tibble: 157 × 16 #>    date       distance_km time_min altitude_gain_m avg_inclination temperature_c #>    <date>           <dbl>    <dbl>           <dbl>           <dbl>         <dbl> #>  1 2018-07-30        36.3     81.8             492         0.0135           30.3 #>  2 2018-07-31        79.3    163.              369         0.00466          21.2 #>  3 2018-08-03        23.9     55.9             344         0.0144           28   #>  4 2018-08-04        30.2     63.3             249         0.00825          31.9 #>  5 2018-08-06        23.8     52.6             337         0.0142           26.3 #>  6 2018-08-10        21.5     47.8             246         0.0115           21.4 #>  7 2018-08-11        71.0    176.             1152         0.0162           22.4 #>  8 2018-10-12        25.3     58.1             372         0.0147           20.6 #>  9 2018-10-13        30.3     69.7             264         0.00870          23.4 #> 10 2019-05-23        19.0     41.8             242         0.0127           21.4 #> # ℹ 147 more rows #> # ℹ 10 more variables: speed_km_h <dbl>, avg_hr_bpm <dbl>, #> #   below_zones_min <dbl>, zone1_min <dbl>, zone2_min <dbl>, zone3_min <dbl>, #> #   zone4_min <dbl>, above_zones_min <dbl>, samples <int>, weekday <fct> # summarize only a specific date library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union track_details |>   filter(date == \"2020-06-01\") |>   summarize_tracks() #> # A tibble: 1 × 16 #>   date       distance_km time_min altitude_gain_m avg_inclination temperature_c #>   <date>           <dbl>    <dbl>           <dbl>           <dbl>         <dbl> #> 1 2020-06-01        59.2     128.             719          0.0121          23.6 #> # ℹ 10 more variables: speed_km_h <dbl>, avg_hr_bpm <dbl>, #> #   below_zones_min <dbl>, zone1_min <dbl>, zone2_min <dbl>, zone3_min <dbl>, #> #   zone4_min <dbl>, above_zones_min <dbl>, samples <int>, weekday <fct>"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_cantons.html","id":null,"dir":"Reference","previous_headings":"","what":"Swiss cantons — swiss_cantons","title":"Swiss cantons — swiss_cantons","text":"2024 geographical borders 26 Swiss cantons provided Swiss Federal Statistical Office (Bundesamt für Statistik, BfS). simple feature (sf) object additional information. can used directly ggplot2::geom_sf() draw map borders cantons. coordinate reference system (CRS) Swiss LV95 system (EPSG 2056).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_cantons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swiss cantons — swiss_cantons","text":"","code":"swiss_cantons"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_cantons.html","id":"swiss-cantons","dir":"Reference","previous_headings":"","what":"swiss_cantons","title":"Swiss cantons — swiss_cantons","text":"list 26 rows 15 columns: KTNR canton number KTNAME canton name GRNR number greater region canton belongs AREA_HA area hectares (rounded whole numbers) E_MIN canton's minimum eastern coordinate value E_MAX canton's maximum eastern coordinate value N_MIN canton's minimum northern coordinate value N_MAX canton's maximum northern coordinate value E_CNTR canton's centroid coordinate (east) N_CNTR canton's centroid coordinate (north) Z_MIN canton's minimum height coordinate value Z_MAX canton's maximum height coordinate value Z_AVG canton's average height coordinate value Z_MED canton's median height coordinate value geometry sf::sfc_MULTIPOLYGON tracing canton's borders","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_cantons.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Swiss cantons — swiss_cantons","text":"https://www.bfs.admin.ch/bfs/de/home/dienstleistungen/geostat/geodaten-bundesstatistik/administrative-grenzen/generalisierte-gemeindegrenzen.assetdetail.30487000.html","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_lakes.html","id":null,"dir":"Reference","previous_headings":"","what":"Swiss lakes — swiss_lakes","title":"Swiss lakes — swiss_lakes","text":"2024 map geometry 23 largest Swiss lakes provided Swiss Federal Statistical Office (Bundesamt für Statistik, BfS). simple feature (sf) object additional information. can used directly ggplot2::geom_sf() draw map Swiss lakes. coordinate reference system Swiss LV95 system (EPSG 2056).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_lakes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swiss lakes — swiss_lakes","text":"","code":"swiss_lakes"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_lakes.html","id":"swiss-lakes","dir":"Reference","previous_headings":"","what":"swiss_lakes","title":"Swiss lakes — swiss_lakes","text":"list 23 rows 10 columns: GMDNR lake number GMDNAME lake name SEE_HA area hectares (rounded whole numbers) E_MIN lake's minimum eastern coordinate value E_MAX lake's maximum eastern coordinate value N_MIN lake's minimum northern coordinate value N_MAX lake's maximum northern coordinate value E_CNTR lake's centroid coordinate (east) N_CNTR lake's centroid coordinate (north) geometry sf::sfc_MULTIPOLYGON tracing lakeshore","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/swiss_lakes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Swiss lakes — swiss_lakes","text":"https://www.bfs.admin.ch/bfs/de/home/dienstleistungen/geostat/geodaten-bundesstatistik/administrative-grenzen/generalisierte-gemeindegrenzen.assetdetail.30487000.html","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/to_linestrings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Linestrings from Points — to_linestrings","title":"Create Linestrings from Points — to_linestrings","text":"Converts collection points collection linestrings, faster plotting. Points grouped date, assumed ordered. Note input data dplyr::summarize()'d date, .e. output probably much shorter input. Additionally, summarizing gets rid information, .e. return value contains dates linestrings joined additional desired information.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/to_linestrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Linestrings from Points — to_linestrings","text":"","code":"to_linestrings(points)"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/to_linestrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Linestrings from Points — to_linestrings","text":"points data.frame tibble (least) date sf geometry column containing point observation","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/to_linestrings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Linestrings from Points — to_linestrings","text":"tibble two columns: date, sf geometry column, containing linestring observation","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/to_linestrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Linestrings from Points — to_linestrings","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(dplyr) library(ggplot2) points <- track_details |>   filter(!is.na(latitude) & !is.na(longitude)) |>   st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = \"WGS84\") to_linestrings(points) |>   ggplot() +   geom_sf()"},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorized road bike trips from 2018 to 2023 — track_classes","title":"Categorized road bike trips from 2018 to 2023 — track_classes","text":"Tracks categorized route direction. Routes driven one direction direction information (direction == NA), routes driven might class (track == NA).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorized road bike trips from 2018 to 2023 — track_classes","text":"","code":"track_classes"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_classes.html","id":"track-classes","dir":"Reference","previous_headings":"","what":"track_classes","title":"Categorized road bike trips from 2018 to 2023 — track_classes","text":"data frame 157 rows 3 columns: date Date trip (date) track Classification track (route taken) (integer) direction Direction route driven; available track == 3 (factor)","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorized road bike trips from 2018 to 2023 — track_classes","text":"Tracks identified date. contains track class (track) direction (direction), information regarding tracks use tracks data, track_details.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Detailed road bike trip data from 2018 to 2023 — track_details","title":"Detailed road bike trip data from 2018 to 2023 — track_details","text":"Track data road bike trips 2018 2023, including (among others) GPS track coordinates, altitude, heart rate, speed, ... data frame contains series data points number trips, data points individual trips measured approximately every five seconds. latitude/longitude coordinates obtained using GPS, means coordinate reference system WGS-84 (EPSG 4326).","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detailed road bike trip data from 2018 to 2023 — track_details","text":"","code":"track_details"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/reference/track_details.html","id":"track-details","dir":"Reference","previous_headings":"","what":"track_details","title":"Detailed road bike trip data from 2018 to 2023 — track_details","text":"data frame 162,175 rows 38 columns: year Year trip (integer) month Month trip (integer) day Day trip (integer) date Date trip (date) altitude_m Current altitude meters (integer) altitude_differences_downhill_m Altitude gain meters segment (integer) altitude_differences_uphill_m Altitude loss meters segment (integer) cadence_rpm Pedaling frequency rpm segment (integer) calories_kcal Energy consumed segment kcal (integer) distance_m Distance travelled meters segment (integer) distance_absolute_m Total distance travelled meters current track (integer) distance_downhill_m Distance travelled going downhill meters segment (integer) distance_uphill_m Distance travelled going uphill meters segment (integer) heartrate_bpm Heart rate bpm segment (integer) incline_percent Current incline percent (integer) latitude Latitude coordinate current position WGS-84 CRS (integer) longitude Longitude coordinate current position WGS-84 CRS (integer) power_watts Current power watts (integer) power_to_weight_ratio_watts_kg Current power--weight ratio watts per kg (integer) rise_rate_m_min Current rate altitude gain meters per minute (integer) speed_m_s Current speed meters per second (integer) temperature_c Current temperature °C (integer) training_time_s Length current segment 0.01 seconds (.e. 5 second segment training_time_s 500) (integer) training_time_absolute_s Total cumulated training time current track 0.01 seconds (integer) training_time_downhill_s Time spent going downhill segment 0.01 seconds; always <= training_time_s (integer) training_time_uphill_s Time spent going uphill segment 0.01 seconds; always <= training_time_s (integer) work_k_j Work done segment kJ (integer) time_below_intensity_zones_s Time heart rate zone 1 seconds, .e. heart rate < 109 bpm (integer) time_in_intensity_zone1_s Time heart rate zone 1 seconds, .e. heart rate within [60;70)% configured maximum (182 bpm) = [109;127) bpm (integer) time_in_intensity_zone2_s Time heart rate zone 2 seconds, .e. heart rate within [70;80)% configured maximum (182 bpm) = [127;145) bpm (integer) time_in_intensity_zone3_s Time heart rate zone 3 seconds, .e. heart rate within [80;90)% configured maximum (182 bpm) = [145;164) bpm (integer) time_in_intensity_zone4_s Time heart rate zone 4 seconds, .e. heart rate within [90;100)% configured maximum (182 bpm) = [164;182) bpm (integer) time_above_intensity_zones_s Time heart rate zone 4 seconds, .e. heart rate >= 182 bpm (integer) normalized_power_watts Normalized power segment watts (intensity-adjusted version power_watts) (integer) right_balance ? (integer) left_balance ? (integer) pedaling_time_s Time spent pedalling segment 0.01 seconds (integer) speed_time_min_km Current speed time seconds required per kilometer (basically inverse speed_m_s) (integer)","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary road bike trip data from 2018 to 2023 — tracks","title":"Summary road bike trip data from 2018 to 2023 — tracks","text":"Aggregated summary track data road bike trips 2018 2023, one row per trip. Details trip track_details.","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/reference/tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary road bike trip data from 2018 to 2023 — tracks","text":"","code":"tracks"},{"path":[]},{"path":"https://nils-s.github.io/cas-asds-practical/reference/tracks.html","id":"tracks","dir":"Reference","previous_headings":"","what":"tracks","title":"Summary road bike trip data from 2018 to 2023 — tracks","text":"data frame 157 rows 15 columns: date Date trip (date) weekday Weekday trip; can calculated date using base::weekdays(), included directly convenience (factor) distance_km Length trip kilometers (integer) time_min Trip duration minutes (integer) altitude_gain_m Cumulated total altitude gain trip, counting positive gains (trips start finish points, .e. overall gain 0 including negative gains)  (integer) temperature_c Median temperature °C (integer) speed_km_h Average speed km/h (integer) avg_hr_bpm Average heart rate beats per minute (integer) below_zones_min Time heart rate zone 1 minutes, .e. heart rate < 109 bpm (integer) zone1_min Time heart rate zone 1 minutes, .e. heart rate within [60;70)% configured maximum (182 bpm) = [109;127) bpm (integer) zone2_min Time heart rate zone 2 minutes, .e. heart rate within [70;80)% configured maximum (182 bpm) = [127;145) bpm (integer) zone3_min Time heart rate zone 3 minutes, .e. heart rate within [80;90)% configured maximum (182 bpm) = [145;164) bpm (integer) zone4_min Time heart rate zone 4 minutes, .e. heart rate within [90;100)% configured maximum (182 bpm) = [164;182) bpm (integer) above_zones_min Time heart rate zone 4 minutes, .e. heart rate >= 182 bpm (integer) samples Number datapoints, .e. given trip, track_details countains samples rows trip (integer)","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/news/index.html","id":"asds2024nilspractical-development-version","dir":"Changelog","previous_headings":"","what":"asds2024.nils.practical (development version)","title":"asds2024.nils.practical (development version)","text":"pkgdown site","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/news/index.html","id":"asds2024nilspractical-020","dir":"Changelog","previous_headings":"","what":"asds2024.nils.practical 0.2.0","title":"asds2024.nils.practical 0.2.0","text":"Version package handed final homework assignment","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/news/index.html","id":"changelog-0-2-0","dir":"Changelog","previous_headings":"","what":"Changelog","title":"asds2024.nils.practical 0.2.0","text":"final homework paper lecture additional data util functions used producing final report vignettes minor changes slides make look bit nicer","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/news/index.html","id":"asds2024nilspractical-010","dir":"Changelog","previous_headings":"","what":"asds2024.nils.practical 0.1.0","title":"asds2024.nils.practical 0.1.0","text":"First version package; used mid-term presentation","code":""},{"path":"https://nils-s.github.io/cas-asds-practical/news/index.html","id":"changelog-0-1-0","dir":"Changelog","previous_headings":"","what":"Changelog","title":"asds2024.nils.practical 0.1.0","text":"basic package setup data (lightly-anonymized road bike track data, geo data Swiss cantons lakes) utility functions working data slides intermediate presentation lecture","code":""}]
